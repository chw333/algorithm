<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<title>KOI 13회 중등부 1.</title>
<meta name="generator" content="Namo WebEditor v3.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

<table border="0" width="595">
    <tr>
        <td width="589" height="27" bgcolor="#CFD3FF"><p><font size="4"><b>&nbsp;&nbsp;휴리스틱을 
            알려주마 (2) - 그리디 메소드</b></font></td>
    </tr>
</table>
<ul>
    <p>&nbsp; 
    <table border="0">
            <tr>
                <td width="550"><p style="line-height:150%;"><font size="2">&nbsp;&nbsp;크리스마스 
                캐롤이던가... 아무튼 스크루지 영감이 나오는 동화를 기억하실지 
                모르겠네요(혹시 오리 아저씨 만화 생각하신분 -_-?). 거기서 보면 
                스크루지는 자기 사무실에 조카(던가.. ;)를 고용하고 일을 합니다. 
                그런데 추운 겨울인데도 땔감 살 돈을 안줘서 조카는 벌벌 떨면서 
                일을 하죠. 그리디 메소드(greedy method; 욕심장이 방법 - 줄여서 
                그리디라고 하겠습니다)란 바로 이 스크루지 영감의 행동과 유사합니다.</font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;</font><font
                 size="2" color="red">그리디란 앞 뒤(그 전의 선택이나, 앞으로 
                벌어질) 상황을 전혀 고려하지 않고, 오직 현재의 이익을 쫓는 방법</font><font
                 size="2">을 뜻합니다. KOI 처음 입문하시는 분들이 문제를 보고, 
                &quot;어, 이거 별거 아니네?&quot; 하면서 그리디한 방법으로 슥슥 
                풀어 놓고 &quot;난 역시 천재야 ^_^a&quot; 하는 경우가 종종 있습니다. 
                이런 경우는 </font><font size="2" color="red">그리디 메소드가 
                항상 최적의 답을 가져다 주지는 않는다</font><font size="2">는 
                사실을 모르기 때문입니다.</font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;다시 
                스크루지 영감 이야기로 돌아와서 생각해 보도록 하죠. 스크루지 
                영감에게 있어서, 일생 일대의 중요한 문제는 &quot;돈을 많이 버는 
                것&quot;일 것입니다. 그리고 현재 선택할 일은 조카에게 땔감을 
                살 돈을 줄 것이냐 안 줄 것이냐 하는 것이지요. 여기에서 그리디한 
                방법은, 아마도 조카에게 돈을 주지 않는 것일 겁니다. 그것이 지금 
                당장 돈을 아낄 수 있는 방법일 테니까요. 하지만 그것은 현재의 
                시각에서는 옳은 듯 하지만, 전체적인 안목으로 보면 바람직한 방법이 
                아닙니다.</font></p>
                <p align="center" style="line-height:150%;"><font size="2"><img src="approx2-1.jpg"
                 width="520" height="740" border="0"></font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;위에서 
                보듯이, 조카에게 땔감을 살 돈을 준다면 일의 능률이 오를 것이고, 
                결과적으로 스크루지에게도 이득이 될 것입니다. 하지만 당장 돈을 
                아끼겠다고 돈을 안준다면 추워서 어디 일이 제대로 되겠습니까?</font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;마찬가지로, 
                그리디 메소드 역시 최적해를 가져다 주지 않는 경우가 많습니다. 
                물론!! 그리디 메소드가 훌륭히 최적해를 뱉어내는, 그런 문제도 
                있습니다. (mst, 최단거리, 스케쥴링 등등) 하지만, 여기서는 그리디로 
                최적해를 보장하지 않는 문제들만 생각해 보기로 하겠습니다.</font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;그리디의 
                장점은 코딩이 간편하고, 알고리즘 설계가 간단하다는 것입니다. 
                그냥 앞 뒤 잴 것 없이 그때그때 좋아 보이는 선택을 하도록 만들면 
                되니까요. 예를 들어서, 앞서 설명했던 TSP문제를 보도록 하겠습니다. 
                자꾸 TSP만 들먹이니까 미안한데... (여러분들이 아니라 TSP한테... 
                -_-;) 이 문제가 그만큼 중요한 문제입니다. 아래와 같이 도시 네 
                개가 있다고 합시다.</font></p>
                <p align="center" style="line-height:150%;"><font size="2"><img src="approx2-2.gif"
                 width="244" height="165" border="0"></font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;TSP문제의 
                목적은 가장 짧은 거리를 갖는 여행 일주 계획을 세우는 것입니다. 
                우리는 이 &quot;가장 짧은&quot;이라는 말에 주목해야겠죠. TSP를 
                그리디에 연관시켜 생각해 봅시다. 이 문제에서 가장 간단한 그리디 
                방법은, &quot;현재의 도시에서 가장 가까운 도시로 간다&quot;입니다. 
                이게 가장 먼저 떠오르는 방법이죠. 그럼 이 방법대로 알고리즘을 
                진행시켜 볼까요? </font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;맨 
                먼저 1번 도시에서 시작한다고 합시다. 1번 도시에서는 2, 3, 4번 
                도시 중 하나로 가는 선택을 해야 합니다. 그리디는 현재의 선택 
                중에서 가장 좋아 보이는 방법을 선택하니까... 여기서는 2번 도시로 
                가면 좋겠네요(3번으로 가도 상관은 없겠지만.)</font></p>
                <p align="center" style="line-height:150%;"><font size="2"><img src="approx2-3.gif"
                 width="243" height="162" border="0"></font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;그럼 
                이제 2번 도시로 왔습니다. 갈 수 있는 곳은 3, 4번 도시가 되겠네요. 
                1번 도시로는 다시 갈 수 없죠? 3번과 4번 중에서 가까운 도시는 
                3번입니다. 3번으로 이동하고, 다시 3번에서는 4번으로 이동해야 
                하겠죠. 그리고 다시 1번으로 되돌아오구요.</font></p>
                <p align="center" style="line-height:150%;"><font size="2"><img src="approx2-4.gif"
                 width="237" height="161" border="0"></font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;자, 
                하나의 여행 일주 경로가 만들어 졌습니다. 매번 가장 좋은 선택만을 
                골라서 했으니, 전체적으로도 가장 좋은 답이 만들어 졌을까요? 
                글세... 그러면 좋겠지만, 다음 답을 보시죠.</font></p>
                <p align="center" style="line-height:150%;"><font size="2"><img src="approx2-5.gif"
                 width="243" height="169" border="0"></font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;위의 
                해를 보시면 아시겠지만, 그리디로 만든 해보다 여행 경로가 더 
                짧음을 알 수 있습니다. 즉, 그리디가 매번 가장 좋은 선택을 하긴 
                하지만, 전체적으로 가장 좋은 답을 내는 것은 아니라는 말이지요. 
                흠.. 그럼 그리디를 왜 쓰냐구요? 쓰잘떼기 없는 거 아니냐구요?</font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;물론 
                그렇게 생각할 수도 있습니다. 하지만, 위의 그리디 알고리즘은 
                O(N^2) 시간만에 쓸 만한 답을 뚝딱 내어 놓습니다. 하지만 가장 
                좋은 답을 고집하려면 결국 O(N!)의 시간이 걸리겠죠. 그리디는 
                이렇게, </font><font size="2" color="red">빠르고 간편하면서도 
                쓸 만한 답을 줍니다. </font><font size="2">또한 그리디는 코딩의 
                간편함 뿐만 아니라, 생각하는 사람의 입장에서도 편합니다.</font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;그리디의 
                감을 잡기 위해, 다른 예를 들어보도록 합시다. 0/1 냅섹(knapsack 
                ; 배낭) 문제입니다. 배낭의 부피가 100이고, (금도끼, 은도끼, 
                쇠도끼, 선녀옷, 알루미늄도끼) 이렇게 다섯가지 물건중 배남에 
                담을 것들을 고른다고 합시다. 각각의 부피는 (40, 50, 30, 30, 
                15)이고, 각각의 가격은 (50, 60, 30, 35, 20)입니다.</font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;그리디한 
                입장에서 보다면, 가격 대 부피비가 클수록 좋은 물건일 것입니다. 
                제한된 부피의 배낭에 물건을 넣어야 할 테니까요. 따라서 지금 
                배낭에 넣을 수 있는 물건들 중, 가장 가격 대 부피비가 큰 것을 
                배낭에 넣는 방법을 고려해 보죠.</font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;맨 
                먼저 알루미늄도끼가 가장 가격 대 부피비가 크죠. 그 다음에 금도끼가 
                가격 대 부피비가 크네요. 이제 배낭에는 (알루미늄도끼, 금도끼)가 
                들어 있습니다. 배낭에 채운 물건의 부피가 55가 되었으니 이제 
                은도끼는 넣을 수 없겠네요. 쇠도끼와 선녀옷 중에서 가격 대 부피비가 
                큰 것은 선녀옷이구요. 배낭에는 (알루미늄도끼, 금도끼, 선녀옷)이 
                들어가구요. 이제 더 이상 물건을 넣을 수 없죠? 우리는 그리디 
                알고리즘을 이용해 가격이 105인 답을 얻었습니다.</font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;물론 
                (금도끼, 쇠도끼, 선녀옷)을 선택하면 가격이 115인 답을 얻을 수도 
                있습니다. 하지만 그리디를 이용한 간단한 방법도 매우 쓸 만한 
                답을 보여 주구요. 실제로 이 문제의 최적해를 구하는 알고리즘은 
                NP입니다. 하지만 우리는 시간복잡도가 O(N^2)인 간단한 그리디 
                알고리즘을 이용해 그럭저럭 훌륭한 답을 얻었습니다. 그리디는 
                이렇듯 거의 모든 문제에 대해 납득할 만한 좋은 답을 내어 줍니다. 
                최적해를 구하는 알고리즘이 존재하는 문제라 하더라도, 이렇게 
                그리디를 이용한 풀이법을 생각해 보시는 것도 아주 좋을 듯 싶습니다.</font></p>
                <p align="left" style="line-height:150%;"><font size="2">&nbsp;&nbsp;다음에는 
                백트래킹에 대해서 살펴보기로 하죠. 백트래킹은 그리디와 결합하면 
                굉장히 강력한(!) 휴리스틱이 됩니다.</font></td>
        </tr>
    </table>
    <p>&nbsp;</p>
</ul>
</body>

</html></html>