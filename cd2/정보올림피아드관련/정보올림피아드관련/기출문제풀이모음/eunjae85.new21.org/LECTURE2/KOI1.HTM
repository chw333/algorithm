<html>

<head>
<title>한국정보올림피아드 분석 (1)</title>
<meta name="generator" content="Namo WebEditor v4.0(Trial)">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<p><font size="5" color="navy">한국정보올림피아드 분석 (1)</font></p>
<p>PC경진대회라는 이름에서 새롭게 바뀌어 한국정보올림피아드가 13회부터 새롭게 
출발한 지 5년이 되었습니다. 과거에 비해 이름만 단순히 바뀐 것이 아닌 출제 유형이 
완전히 변하게 되었습니다. 이에, 중 고등부에서 그동안 출제되었던 문제들의 유형과 
성향을 분석해 볼 수 있는 시간을 갖도록 하겠습니다.</p>
<p>정보올림피아드도 수학올림피아드와 비슷하게 출제된 문제들을 몇가지 유형별로 
분석해 볼 수 있습니다. 저는 그 유형을 다음과 같은 기준으로 만들어 보았습니다.</p>
<p><font size="4" color="red">동적 계획법 (Dynamic programming)</font></p>
<ul>
    <p>큰 문제를 구하기 위해 보다 작은 부분문제로 분할해 답을 구한 후 큰 문제의 
    답을 얻는 방법입니다. 문제에 따라 난이도도 크게 차이가 나며 가장 출제 비중이 
    큰 문제입니다.</p>
</ul>
<p><font color="red" size="4">퇴각검색 (Back tracking)</font></p>
<ul>
    <p>생길 수 있는 거의 모든 상태 공간을 검사하여 답을 찾는 방법으로 다항시간에 
    문제의 답을 찾기가 힘들 때 주로 사용하는 방법입니다. 얼마나 불필요한 검색을 
    줄이느냐가 이 유형의 관건이 됩니다. </p>
</ul>
<p><font size="4" color="red">최단거리 (Shortest path)</font></p>
<ul>
    <p>그래프 상에서 어느 한 점과 다른 한 점 사이의 가장 가까운 경로를 찾는 
    문제입니다. 많은 문제가 변형을 통해 이 유형으로 풀이가 가능합니다.</p>
</ul>
<p><font color="red" size="4">계산 기하학 (Computational geometry)</font></p>
<ul>
    <p>좁은 의미에서는 점과 다각형의 성질에 대한 문제들을 말합니다. 넓게 생각하면 
    평면이나 공간상의 좌표를 이용하는 모든 문제를 이 유형에 포함시킬 수 있겠습니다.</p>
</ul>
<p><font color="red" size="4">휴리스틱 (Heuristic)</font></p>
<ul>
    <p>최적의 답을 구하는 명쾌한 방법이 없을 경우 사용합니다. 모든 조건과 변수를 
    고려하는 것을 포기하고 적당한 선에서의 좋은 답을 얻기 위한 방법을 말합니다. 
    퇴각검색, 분지한정, 욕심쟁이 방법, 확률적 알고리즘 등 여러 가지 방법을 사용할 
    수 있습니다.</p>
</ul>
<p><font color="red" size="4">단순한 문제</font></p>
<ul>
    <p>문제 자체의 난이도가 쉬운 경우나, 풀이법은 명쾌하나 그 구현이 힘든 경우(쉽게 
    말해서 졸라 쳐야하는...) 경우입니다. 이런 문제의 경우 난이도는 극단적으로 
    쉽거나(전자의 경우), 극단적으로 어려울(후자의 경우) 수 있습니다. 즉, 문제가 
    단순하다고 해서 꼭 결과가 좋은 것은 아니라는 겁니다. 과거 PC경진대회의 출제 
    스타일과 비슷합니다. 혹자는 이 유형을 '노가다'라는 세글자로 대신합니다.</p>
</ul>
<p>지금까지는 출제된 적이 없지만, 다음과 같은 유형의 문제도 출제 될 가능성이 
다분하니, 공부해 두시는 것이 좋습니다.</p>
<p><font color="red" size="4">욕심쟁이 방법 (Greedy method)</font></p>
<ul>
    <p>전체적인 조건을 생각하지 않고 현재의 선택에만 최선을 다하는 방법입니다. 
    거의 모든 문제에 대해서 이 방법을 적용할 수 있지만, 여기서는 문제에 대한 
    깊은 분석과 방법에 대한 증명을 통해서 욕심쟁이 방법만으로도 최적의 결과를 
    얻을 수 있는 경우에 한정합니다.</p>
</ul>
<p><font color="red" size="4">분할정복 (Divide and conquer)</font></p>
<ul>
    <p>주어진 문제를 더욱 작은 문제로 분할하여 결과를 얻는 방법을 말합니다. 
    동적 계획법과 다른점은 하향식(top-down) 방법을 이용한다는 것입니다.</p>
</ul>
<p><font color="red">각종 그래프 관련 알고리즘</font></p>
<ul>
    <p>여러 가지 종류의 네트워크, 스패닝 트리, 여러 결합 요소 등에 관한 내용을 
    묻는 문제를 말합니다.</p>
</ul>
<p>참고로 중, 고등부는 문제의 유형에 대해서는 크게 차이가 나지 않고 약간의 난이도 
차이만이 있습니다. 초등부 문제는 그 경향이 중, 고등부와는 사뭇 다르며 아직도 
PC경진대회의 출제 경향을 완전히 벗어나진 않고 있습니다. 다만 최근 몇 년간 점차 
중, 고등부의 경향을 따라가려는 움직임을 보이고 있습니다.</p>
<p>제가 이것에 대한 글을 쓰는 이유는 지역 예선에서 뽑혀 전국대회에 나가면서도 
과연 이 대회가 무엇을 묻는 대회인지 모르는 경우가 태반이기 때문입니다. 대회 
자체를 모르고서는 좋은 성적을 거둘 수 없는 것은 물론입니다. 일반에 알려진 정보가 
없으니 고액 과외나 지역간의 편차가 생기는 것도 어쩌면 당연한 현상일지도 모릅니다. 
이 글이 정보올림피아드를 준비하는 데 하나의 길잡이가 될 수 있을 것이라 생각합니다.</p>
<p>마지막으로, 문제에 따른 유형 분류야 하겠지만 그 구분이 상당히 애매한 경우가 
많습니다. 이 점 양해해 주시고 좋은 의견 있으신 분은 메일 보내주시기 바랍니다.</p>
</body>

</html>
