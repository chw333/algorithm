<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=gb_2312-80">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>NOI '98 Task Statements </title>
</head>

<body background="img/backgrd.jpg" link="#0000FF" vlink="#800080">

<h2 align="center"><font size="6">National Olympiad in
Informatics</font></h2>

<h2 align="center">Singapore, 1998</h2>

<p align="center">¡¡</p>

<h2>TASK OVERVIEW</h2>
<div align="center"><center>

<table border="3" cellpadding="5">
    <tr>
        <th>¡¡</th>
        <th>Task 1</th>
        <th>Task 2</th>
        <th>Task 3</th>
    </tr>
    <tr>
        <th>Program name:</th>
        <th>SHIP.EXE</th>
        <th>KNIGHT.EXE</th>
        <th>SUM.EXE</th>
    </tr>
    <tr>
        <th>Input file:</th>
        <th>SHIP.IN</th>
        <th>KNIGHT.IN</th>
        <th>SUM.IN</th>
    </tr>
    <tr>
        <th>Output file:</th>
        <th>SHIP.OUT</th>
        <th>KNIGHT.OUT</th>
        <th>SUM.OUT</th>
    </tr>
    <tr>
        <th>Maximum execution time:</th>
        <th>1 minute</th>
        <th>1 minute</th>
        <th>1 minute</th>
    </tr>
    <tr>
        <th>Test cases:</th>
        <th>6</th>
        <th>6</th>
        <th>6</th>
    </tr>
    <tr>
        <th>Total points:</th>
        <th>100</th>
        <th>100</th>
        <th>100</th>
    </tr>
</table>
</center></div>

<hr>

<h2>Task 1: Ship Berth Assignment</h2>

<p>Ships have to be berthed alongside a harbour for short stays.
To minimize the number of berths of the harbour used, the harbour
planners want to use berths efficiently, reusing them when ships
leave. You are charged with implementing a solution to their
berth assignment problem. </p>

<p>You are given the arrival and departure times for <i>N</i>
ships. The arrival time of the <i>j</i>th ship is <i>A[j]</i>,
and its departure time is <i>D[j]</i>, and these times occur with
a <i>T</i>-hour period, so that 1 &lt;= <i>A[j]</i> &lt; <i>D[j]</i>
&lt;= <i>T</i>. Each ship must be assigned a berth during its
stay, namely, during the time interval <i>[A[j],D[j]]</i>. For
simplicity, we assume that each ship has unit length and each
berth also has unit length and so any ship can be assigned to any
berth. However, of course, two ships cannot use the same berth at
the same time, so if ships numbered <i>j</i> and <i>k</i> use the
same berth, it must be the case that either <i>A[j]</i> &gt; <i>D[k]</i>
or <i>A[k]</i> &gt; <i>D[j]</i>. </p>

<p>Your program is required to do the assignment of berths to
ships in such a way as to minimize the total number of berths
that are used at least once. Your program will output this
minimum total number of berths used (you should not output the
entire assignment). </p>

<p>You may assume that <i>N</i> &lt;= 1000, <i>T</i> &lt;= 48,
and, for each <i>j</i>, <i>A[j]</i> and <i>D[j]</i> are integers
between 1 and 48 inclusive. </p>

<h3>Input File Format</h3>

<p>The input file <tt>SHIP.IN</tt> contains the integer <i>T</i>
(the number of hours) on the first line, the integer <i>N</i>
(the number of ships) on the second line, followed by <i>N</i>
lines, each containing three integers: a ship number, the arrival
time of the ship and the departure time of the ship. </p>

<p>For example, consider the following input: </p>

<pre>
16               
8                
1   1   4        
2   3   8        
3   6  12    
4   5  10    
5  11  16    
6   3   9    
7  13  15    
8   1   2    
</pre>

<p>In this example, the value of <i>T</i>, given on the first
line, is 16. The number of ships <i>N</i> is given next: 8.
Finally, ship number 1 arrives at time 1 and leaves at time 4,
ship number 2 arrives at time 3 and leaves at time 8, and so on. </p>

<h3>Output File Format</h3>

<p>The output file <tt>SHIP.OUT</tt> contains a single integer,
which indicates the minimum number of berths used. </p>

<p>For the above example, the output will be: </p>

<pre>
4
</pre>

<hr>

<h2>Task 2: Knight Moves</h2>

<p>A jump of a knight on an <i>N</i> x <i>N</i> chess board
consists of two horizontal steps and one vertical step, or one
horizontal step and two vertical steps. For example, consider a
knight on position <i>K</i>=(3,2) in the following 5 x 5 board. </p>

<pre>
         1   2   3   4   5
       +---+---+---+---+---+
    1  |   |   |   | X | P |
       +---+---+---+---+---+
    2  |   |   |   | X |   |
       +---+---+---+---+---+
    3  |   | K |   | X |   |
       +---+---+---+---+---+
    4  |   |   |   | X |   |
       +---+---+---+---+---+
    5  |   |   |   |   |   |
       +---+---+---+---+---+
</pre>

<p>This knight can jump to positions (1,1), (1,3), (2,4), (4,4),
(5,3) and (5,1). The knight can move to position <i>P</i>=(1,5)
by jumping first to (5,3), then to (3,4) and then to <i>P</i>.
This is the least number of jumps to get from <i>K</i> to <i>P</i>.
</p>

<p>The board may contain forbidden positions, indicated by <i>X</i>
in the above board. The knight may not land on a forbidden
position. In the above situation, the only allowed way to get
from <i>K</i> to <i>P</i> with 3 jumps is via (1,1) and (2,3). </p>

<p>Write a program that, given a board size <i>N</i>, an initial
position <i>K</i> of the knight, a target position <i>P</i> and a
list of forbidden positions, computes the least number of jumps
to get from <i>K</i> to <i>P</i> while not landing on any
forbidden positions. The board size <i>N</i> in the test data and
the number of forbidden positions both range from 5 to 50. </p>

<p>Output the value -1 if there is no way to get from <i>K</i> to
<i>P</i> without landing on any forbidden positions. </p>

<h3>Input File Format</h3>

<p>The input file <tt>KNIGHT.IN</tt> contains </p>

<ul>
    <li>the board size <i>N</i> on the first line, </li>
    <li>the initial position <i>K</i> of the knight on the second
        line, </li>
    <li>the target position <i>P</i> on the third line, </li>
    <li>the number <i>T</i> of forbidden positions on the fourth
        line, followed by <i>T</i> lines each containing a
        forbidden position. </li>
</ul>

<p>The input data corresponding to the chess board shown in the
example above is as follows. </p>

<pre>
5           
3 2         
1 5         
4           
1 4         
2 4         
3 4         
4 4         
</pre>

<p>On the first line is the number 5 of rows and columns. Next is
the initial position <i>K</i>, which is (3,2). The target
position <i>P</i> is given on the third line. Next, the number of
forbidden positions, 4 in this example, is given. The list of
forbidden positions follows, one per line. </p>

<h3>Output File Format</h3>

<p>The output file <tt>KNIGHT.OUT</tt> contains an integer which
indicates the number of jumps in the shortest move from <i>K</i>
to <i>P</i>. Output -1 if there is no solution. </p>

<p>For the above example, the output will be: </p>

<pre>
3
</pre>

<hr>

<h2>Task 3: Sum Expression</h2>

<p>Any positive integer <i>n</i> that is at least 4 can be
expressed as a sum of prime numbers from 2 to <i>n</i>-1. For
example, </p>

<pre>
          9  = 2 + 5 + 2 
             = 2 + 3 + 2 + 2 
             = 3 + 3 + 3
             = 2 + 7.
</pre>

<p>(Recall that a prime is an integer <i>p</i> &gt;= 2 whose only
divisors are itself and 1.) </p>

<p>Write a program to compute <i>C(n)</i>, the number of
different ways to express <i>n</i> as a sum of primes, where
permutations of a sum are considered to be the same; ie. 2 + 3
and 3 + 2 should be considered as one expression. In the example
above, <i>C</i>(9) is 4. You may assume 4 &lt;= <i>n</i> &lt;=
96. </p>

<h3>Input File Format</h3>

<p>The input text file <tt>SUM.IN</tt> contains a positive
integer <i>n</i> which is at most 96. For example </p>

<pre>
9     
</pre>

<h3>Output File Format</h3>

<p>Your program should produce an output text file <tt>SUM.OUT</tt>
that contains the value <i>C(n)</i>. For the above example, the
output will be: </p>

<pre>
4</pre>

<hr>
</body>
</html>
