<html>

<head>
<title>SER 2001: Shuffle off to…Milledgeville</title>
</head>

<body lang=EN-US style='tab-interval:.5in'>

<h1> Shuffle off to...Milledgeville</h1>

<h3>input file: <code>shuffle.in</code></h3>


<p>MTU, Inc., is a multi-national software developer with
office buildings in several cities.   As
part of a corporate reorganization, the company’s leaders are changing employee
office assignments.   Employees will
remain in the same office building.  
Consider the Milledgeville office with employees A, B, C, F, G, I, R,
and U as depicted below (the hallways are shaded, and the office numbers are
indicated above the employee names).</p>

<table>
<tr>
<td>
<i>Old office assignments</i>
</td>
<td>
<i>New office assignments</i>
</td>
</tr>

<tr>
<td>
<img  src="shuffle1.gif">
</td>
<td>
<img  src="shuffle2.gif">
</td>
</tr>
</table>


<h2>Input</h2>

<p>The input file will contain a
series of building specifications.   Each
building specification begins with a line containing a single nonnegative
integer, <i>n</i> &lt;= 50.   The next line contains a string of
between 1 and 25 uppercase or lowercase letters, indicating the name of the
city where the building is located.  
Each of the next <i>n</i> lines contains a single office
specification.   Each office
specification is of the form:</p>


<p><i>office_number</i>   
<i>old_occupant</i>    <i>new_occupant</i></p>


<p>where <i>office_number</i> is an integer, <i>old_occupant</i>
and <i>new_occupant</i> are strings of between 1 and 25 uppercase 
or lowercase
letters each, and these three fields are separated by whitespace.
For each building specification, an employee
name will appear exactly once as an <i>old_occupant</i> and exactly 
once as a <i>new_occupant</i>.
No employees share an office.
Your program should stop processing building
specifications when it reaches a building where <i>n</i> is 0.</p>

<h2>Output</h2>

<p>Begin the output for each building
with a line containing only the name of the city where the building is
located.   On the next line, output the
length of the longest dependency chain.  
Output all dependency chains meeting this length on succeeding lines,
one chain per line.   Begin the output
for a chain with the name from the chain that comes first when the names are
sorted in increasing order.   The order
of succeeding names in the chain should reflect the office swaps (for example,
<code>C I U G</code> is the correct output for the
Milledgeville building, <code>C</code>
moves to the office originally occupied by <code>I</code>,
<code>I</code> moves to the office originally
occupied by <code>U</code>, etc.; note that
<code>C G U I</code> is unacceptable output in this
case because <code>C</code> does not move to
the office originally occupied by <code>G</code>).
If there are multiple dependency chains
with the same length, list them in the output in increasing sorted order of the
first name in each list.   Separate the
output between buildings with a blank line.  
Follow the format illustrated in the Sample Output.</p>

<h3>Sample Input</h3>

<pre>
8
Milledgeville
11 A R
21 C G
22 U I
23 B F
31 F B
32 I C
33 G U
41 R A
4
IowaCity
1  Newman      Allen
2  Allen       Newman
3  Chalmers    Granger
4  Granger     Chalmers
0
</pre>

<h3>Output corresponding to the Sample Input</h3>

<pre>
Milledgeville
The longest dependency chain length is 4.
Chain 1:  C I U G

IowaCity
The longest dependency chain length is 2.
Chain 1:  Allen Newman
Chain 2:  Chalmers Granger
</pre>

</body>

</html>
