<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Binary Search</title>
<style xml:space="preserve"> h1 { text-align: center; font-size: large; text-decoration: underline }  h2 { text-align: center; font-size: large; margin-bottom: 0 } </style></head>
<body>

<h1>2000-2001 ACM Northeastern European Regional Programming Contest</h1><h2>Problem E<br></br>&quot;Binary Search&quot;</h2>

<table>
<tr><td colspan="1" rowspan="1"><strong>Input file</strong></td><td colspan="1" rowspan="1"><tt>SEARCH.IN</tt></td></tr>
<tr><td colspan="1" rowspan="1"><strong>Output file</strong></td><td colspan="1" rowspan="1"><tt>SEARCH.OUT</tt></td></tr>
<tr><td colspan="1" rowspan="1"><strong>Time limit</strong></td><td colspan="1" rowspan="1">15 seconds per test</td></tr>
</table>

<p>The program fragment below performs binary search of an integer
number in an array that is sorted in a nondescending order:</p>

<table style="width:100%">
<tr><td colspan="1" rowspan="1"><strong>Pascal (file &quot;sproc.pas&quot;)</strong></td><td colspan="1" rowspan="1"><strong>C (file &quot;sproc.c&quot;)</strong></td></tr>
<tr>
<td colspan="1" rowspan="1" style="width:50%; vertical-align:top"><pre xml:space="preserve"><tt>
const
  MAXN = 10000;
var
  A: array[0..MAXN-1] of integer;
  N: integer;

procedure BinarySearch(x: integer);
var
  p, q, i, L: integer;
begin
  p := 0;   { Left border of the search  }
  q := N-1; { Right border of the search }
  L := 0;   { Comparison counter         }
  while p &lt;= q do begin
    i := (p + q) div 2;
    inc(L);
    if A[i] = x then begin
      writeln('Found item i = ', i,
        ' in L = ', L, ' comparisons');
      exit
    end;
    if x &lt; A[i] then
      q := i - 1
    else
      p := i + 1
  end
end;
</tt></pre></td>
<td colspan="1" rowspan="1" style="width:50%; vertical-align:top"><pre xml:space="preserve"><tt>

#define MAXN 10000

int A[MAXN];
int N;

void BinarySearch(int x)
{
  int p, q, i, L;

  p = 0;   /* Left border of the search  */
  q = N-1; /* Right border of the search */
  L = 0;   /* Comparison counter         */
  while (p &lt;= q) {
    i = (p + q) / 2;
    ++L;
    if (A[i] == x) {
      printf(&quot;Found item i = %d&quot;
        &quot; in L = %d comparisons\n&quot;, i, L);
      return;
    }
    if (x &lt; A[i])
      q = i - 1;
    else
      p = i + 1;
  }
}
</tt></pre></td>
</tr>
</table>

<p>Before <tt>BinarySearch</tt> was called, <tt>N</tt> was set to some 
integer number from 1 to 10000 inclusive and
array <tt>A</tt> was filled with a nondescending integer sequence.</p>

<p>It is known that the procedure has terminated with the message 
&quot;<tt>Found item i = XXX in L = XXX comparisons</tt>&quot; with some
known values of <tt>i</tt> and <tt>L</tt>.</p>

<p>Your task is to write a program that finds all possible values of
<tt>N</tt> that could lead to such message. However, the number of 
possible values of <tt>N</tt> can be quite big. Thus, you are asked to group all 
consecutive <tt>N</tt>s into intervals and write down only first and 
last value in each interval.</p>

<h3>Input</h3>

<p>The input file consists of a single line with two integers <tt>i</tt>
and <tt>L</tt> (0&nbsp;&le;&nbsp;<tt>i</tt>&nbsp;&lt;&nbsp;10000 and
1&nbsp;&le;&nbsp;<tt>L</tt>&nbsp;&le;&nbsp;14), separated by a space.</p>

<h3>Output</h3>

<p>
On the first line of the output file write the single 
integer number <em>K</em>
representing the total number of intervals for possible values of <tt>N</tt>.
Then <em>K</em> lines shall follow listing those intervals in an ascending order.

Each line shall contain
two integers <em>A<sub>i</sub></em> and <em>B<sub>i</sub></em>
(<em>A<sub>i</sub></em>&nbsp;&le;&nbsp;<em>B<sub>i</sub></em>)
separated by a space, representing first and last value of the interval.</p>

<p>
If there are no possible values of <tt>N</tt> exist, then the output file
shall contain the single 0.</p>

<table style="width:100%">
<tr><td colspan="1" rowspan="1" style="width:50%; vertical-align:top">

<h3>Sample input #1</h3>

<pre xml:space="preserve"><tt>9000 2</tt></pre>

<h3>Output for the sample input #1</h3>

<pre xml:space="preserve"><tt>0</tt></pre>

</td><td colspan="1" rowspan="1" style="width:50%; vertical-align:top">

<h3>Sample input #2</h3>

<pre xml:space="preserve"><tt>10 3</tt></pre>

<h3>Output for the sample input #2</h3>

<pre xml:space="preserve"><tt>4
12 12
17 18
29 30
87 94</tt></pre>

</td></tr>
</table>

</body>
</html>