<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0072)http://www.acm.inf.ethz.ch/ProblemSetArchive/B_US_EastCen/1991/stack.htm -->
<HTML><HEAD><TITLE>Problem 5 - Anagrams by Stack</TITLE>
<META content="text/html; charset=ks_c_5601-1987" http-equiv=Content-Type>
<META content="MSHTML 5.00.3315.2870" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<H2>1991 ACM East Central Regional Programming Contest</H2>
<H3>Problem 5: Anagrams by Stack</H3></CENTER>
<CENTER>
<TABLE>
  <TBODY>
  <TR align=BOTTOM>
    <TD>Source file:</TD>
    <TD>stack.pas or <A 
      href="http://www.acm.inf.ethz.ch/ProblemSetArchive/B_US_EastCen/1991/stack.c">stack.c</A></TD></TR>
  <TR align=BOTTOM>
    <TD>Input file:</TD>
    <TD><A 
      href="http://www.acm.inf.ethz.ch/ProblemSetArchive/B_US_EastCen/1991/stack.in">stack.in</A></TD></TR>
  <TR align=BOTTOM>
    <TD>Output file:</TD>
    <TD>stack.out</TD></TR></TBODY></TABLE></CENTER>
<P>How can anagrams result from sequences of stack operations? There are two 
sequences of stack operators which can convert TROT to TORT: <PRE>[
i i i i o o o o
i o i i o o i o
]
</PRE>
<P>where <I>i</I> stands for Push and <I>o</I> stands for Pop. Your program 
should, given pairs of words produce sequences of stack operatons which convert 
the first word to the second. 
<H4>Input</H4>
<P>The input will consist of serveral lines of input. The first line of each 
pair of input lines is to be considered as a source word (which does not include 
the end-of-line character). The second line (again, not including the 
end-of-line character) of each pair is a target word. The end of input is marked 
by a single blank line. 
<H4>Output</H4>
<P>For each input pair, your program should produce a sorted list of valid 
sequences of <I>i</I> and <I>o</I> which produce the target word from the source 
word. Each list should be delimited by <PRE>[
]
</PRE>and the sequences should be printed in "dictionary order". Within each 
sequence, each <I>i</I> and <I>o</I> is followed by a single space and each 
sequence is terminated by a new line. 
<H4>Process</H4>
<P>A stack is a data storage and retrieval structure permitting two operations: 
<DIR>Push - to insert an item and<BR>Pop - to retrieve the most recently pushed 
item </DIR>
<P>We will use the symbol <I>i</I> (in) for push and <I>o</I> (out) for pop 
operations for an initially empty stack of characters. Given an input word, some 
sequences of push and pop operations are valid in that every character of the 
word is both pushed and popped, and futhermore, no attempt is ever made to pop 
the empty stack. For example, if the word FOO is input, then the sequence: 
<DIR>
<TABLE>
  <TBODY>
  <TR>
    <TD vAlign=center><TT>i i o i o o</TT></TD>
    <TD>is valid, but</TD></TR>
  <TR>
    <TD vAlign=center><TT>i i o </TT></TD>
    <TD>is not (it's too short), neither is</TD></TR>
  <TR>
    <TD vAlign=center><TT>i i o o o i</TT></TD>
    <TD>(there's an illegal pop of an empty stack)</TD></TR></TBODY></TABLE></DIR>
<P>Valid sequences yield rearrangements of the letters in an input word. For 
example, the input word FOO and the sequence <TT>i i o i o o</TT> produce the 
anagram OOF. So also would the sequence <TT>i i i o o o</TT>. You are to write a 
program to input pairs of words and output all the valid sequences of <TT>i</TT> 
and <TT>o</TT> which will produce the second member of each pair from the first. 

<H4>Sample Input</H4><PRE>madam
adamm
bahama
bahama
long
short
eric
rice
</PRE><A input terminate to line blank>
<H4>Sample Output</H4><PRE>[
i i i i o o o i o o 
i i i i o o o o i o 
i i o i o i o i o o 
i i o i o i o o i o 
]
[
i o i i i o o i i o o o 
i o i i i o o o i o i o 
i o i o i o i i i o o o 
i o i o i o i o i o i o 
]
[
]
[
i i o i o i o o 
]
</PRE></A></BODY></HTML>
