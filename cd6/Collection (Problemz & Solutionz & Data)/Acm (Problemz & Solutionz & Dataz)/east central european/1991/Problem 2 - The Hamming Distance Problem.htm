<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0074)http://www.acm.inf.ethz.ch/ProblemSetArchive/B_US_EastCen/1991/hamming.htm -->
<HTML><HEAD><TITLE>Problem 2 - The Hamming Distance Problem</TITLE>
<META content="text/html; charset=ks_c_5601-1987" http-equiv=Content-Type>
<META content="MSHTML 5.00.3315.2870" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<H2>1991 ACM East Central Regional Programming Contest</H2>
<H3>Problem 2: The Hamming Distance Problem</H3></CENTER>
<CENTER>
<TABLE>
  <TBODY>
  <TR align=BOTTOM>
    <TD>Source file:</TD>
    <TD>hamming.pas or <A 
      href="http://www.acm.inf.ethz.ch/ProblemSetArchive/B_US_EastCen/1991/hamming.c">hamming.c</A></TD></TR>
  <TR align=BOTTOM>
    <TD>Input file:</TD>
    <TD><A 
      href="http://www.acm.inf.ethz.ch/ProblemSetArchive/B_US_EastCen/1991/hamming.in">hamming.in</A></TD></TR>
  <TR align=BOTTOM>
    <TD>Output file:</TD>
    <TD>hamming.out</TD></TR></TBODY></TABLE></CENTER>
<P>The Hamming distance between two strings of bits (binary integers) is the 
number of corresponding bit positions that differ. This can be found by using 
XOR on corresponding bits or equivalently, by adding corresponding bits (base 2) 
without a carry. For example, in the two bit strings that follow: <PRE>	     A      0 1 0 0 1 0 1 0 0 0
	     B      1 1 0 1 0 1 0 1 0 0
	  A XOR B = 1 0 0 1 1 1 1 1 0 0
</PRE>The Hamming distance (H) between these 10-bit strings is 6, the number of 
1's in the XOR string. 
<H4>Input</H4><I>N</I>, the length of the bit strings and <I>H</I>, the Hamming 
distance. 
<H4>Output</H4>A list of all possible bit strings of length <I>N</I> that are 
Hamming distance <I>H</I> from the bit string containing all 0's (origin). That 
is, all bit strings of length <I>N</I> with exactly <I>H</I> 1's. The number of 
such bit strings is equal to the combinatorial symbol <I>C(N, H)</I>. This is 
the number of possible combinations of <I>N-H</I> zeros and <I>H</I> ones. It is 
equal to 
<CENTER>
<TABLE>
  <TBODY>
  <TR>
    <TD align=middle>N! 
      <HR SIZE=1>
      (N-H)! H! </TD></TR></TBODY></TABLE></CENTER>
<P>This number can be very large. The program should work for 
1&lt;=<I>N</I>&lt;=10 and 1&lt;=<I>H</I>&lt;=10. 
<H4>Sample</H4>For N=4 and H=2 the output should contain all of the following 
bit strings (order is unimportant): <PRE>	0011
	0101
	0110
	1001
	1010
	1100
</PRE>C(4, 2) is 6. </BODY></HTML>
