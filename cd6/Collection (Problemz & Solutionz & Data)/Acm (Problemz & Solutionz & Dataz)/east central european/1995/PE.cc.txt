/* LED.cc   10-28-95 */

#include <iostream.h>

#ifdef DEBUG
#define DBG(x) x
#else
#define DBG(x)
#endif

int onSegments[] = {
 0x7E, 0x30, 0x6D, 0x79, 0x33,
 0x5B, 0x5F, 0x70, 0x7F, 0x7B
};

/*
void printLED ( int sample )
{
 int mask = 0x40;
 int i;
 printf("LED sample: ");
 for(i=0;i<7;i++, mask >>= 1)
  printf("%c", ( sample & mask )? 'Y':'N');
 printf("\n");
}
*/

int kase = 0;
int BOSegments;
int numberOfSamples;
int numberOfBurnedOutSegments;
int sequenceMatch;

int sampleArray[10];

int main ()
{
 int i, j;
 int start, length;
 char buf[10];

 while(1)
 {
  cin >> numberOfSamples;
  if ( numberOfSamples == 0 ) break;

  kase++;

  for(i=0;i<numberOfSamples;i++)
  {
   cin >> buf ;
   sampleArray[i] = 0;
   for(j=0;j<7;j++)
   {
    if ( buf[j] == 'Y' )
    {
      sampleArray[i] |= 0x40 >> j;
    }

   }
   DBG(printf("Sample %d:  %02X\n", i, sampleArray[i]);)
   DBG(printLED ( sampleArray[i] );)
  }

 for(start=9; start>=numberOfSamples-1;start--)
 {
  DBG(printf("START of sequence = %d\n", start);)
  BOSegments = 0;
  sequenceMatch = 1;
  for(i=0;i<numberOfSamples;i++)
  {
   DBG(printf("  Sample (from above START) = %d\n", i);)
   if (
     /* All Segs Match */
       (
	(~sampleArray[i] 
        |
	(onSegments[start-i] & ~BOSegments)
        )
        &
        0x7F
       )
	==
        0x7F
      )
   {
    DBG(printf("   MATCH for this sequence element\n");)
    DBG(printf("     Old BOSegments = %02X\n", BOSegments);)
    DBG(printf("     onSegments     = %02X\n", onSegments[start-i]);)
    DBG(printf("     sampleArray    = %02X\n", sampleArray[i]);)
    BOSegments = BOSegments 
		  |
		  (
		  onSegments[start-i]
                  &
                  ~sampleArray[i]
                  &
                  ~BOSegments
		  )
                  ;
   DBG(printf("   New BOSegments = %02X\n", BOSegments);)
   }
   else
   {
    DBG(printf("   MISMATCH for this sequence element\n");)
    sequenceMatch = 0;
    break;
   }
  }

  if ( sequenceMatch ) break;
 }

  DBG(printf("Case %d:  ", kase);)

  if ( sequenceMatch )
  {
   DBG(printf("MATCH %d %d\n", numberOfSamples, start);)
   cout << "MATCH\n";
  }
  else
  {
   cout << "MISMATCH\n" ;
  }
}
 return 0;
}

