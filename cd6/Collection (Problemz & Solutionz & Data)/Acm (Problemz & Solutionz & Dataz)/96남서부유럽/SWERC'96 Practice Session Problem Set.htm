<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0076)http://www.acm.inf.ethz.ch/ProblemSetArchive/B_EU_SWERC/1996/practice96.html -->
<HTML><HEAD><TITLE>SWERC'96 Practice Session Problem Set</TITLE>
<META content="text/html; charset=ks_c_5601-1987" http-equiv=Content-Type>
<META content="MSHTML 5.00.3315.2870" name=GENERATOR>
<META content="" name=description>
<META content="" name=keywords>
<META content="" name=resource-type>
<META content="" name=distribution>
<META content="Erich Oswald" name=Author>
<META 
content="HTML version of the problems used for the practice session of the SWERC'96" 
name=Description></HEAD>
<BODY bgColor=#ffffff>
<H3 align=center>1996--1997 ACM International Collegiate Programming 
Contest<BR>Southwestern European Regional Contest<BR>ETH Z&uuml;rich, November 15, 
1996<BR>Practice Session<BR></H3>
<P align=center>Sponsored by <I>Microsoft<BR></I>Supported by <I>Union Bank of 
Switzerland</I><BR>
<HR>

<P></P>
<H1>Problem Set (Practice Session)</H1>
<H3>Contents</H3>
<OL>
  <LI><A 
  href="http://www.acm.inf.ethz.ch/ProblemSetArchive/B_EU_SWERC/1996/practice96.html#Floppies">Floppies</A> 

  <LI><A 
  href="http://www.acm.inf.ethz.ch/ProblemSetArchive/B_EU_SWERC/1996/practice96.html#Golf">Golf</A> 

  <LI><A 
  href="http://www.acm.inf.ethz.ch/ProblemSetArchive/B_EU_SWERC/1996/practice96.html#Reverse">Reverse 
  Text</A> </LI></OL>
<H2>
<HR>
</H2>
<H2><A name=Floppies></A>Problem A: Floppies</H2>
<P>
<TABLE border=0 cellPadding=0 cellSpacing=2>
  <TBODY>
  <TR>
    <TD align=right><B>Source file:<BR>Input file:</B></TD>
    <TD><TT><FONT 
      size=+1>floppies.pas/floppies.c/floppies.C<BR>floppies.in</FONT></TT></TD></TR></TBODY></TABLE></P>
<P>In this age of Internet, on-line connections, instantaneous email, etc., 
there are still some people who need to work with floppy disks. John is one of 
those. Every evening he goes home and continues what he has been doing in his 
office on his private UNIX system. He copies all the files he needs to floppy 
disks according to the following procedure: </P>
<OL>
  <LI>Put all files in one big SHAR file. 
  <LI>Compress the file. 
  <LI><TT>uuencode</TT> it, such that it is split in nice lines of 62 characters 
  each (including the newline). 
  <LI>Split it in files of 30,000 lines each (about 1.86Mb). 
  <LI>Compress each of the files and put it on a floppy by itself. </LI></OL>
<P>So far, this procedure always worked, since 1.86Mb of uuencoded text, after 
compression, will nicely fit on a 1.44Mb floppy disk. </P>
<P>Now, given that through compression the size of the SHAR file halves and that 
uuencoding a compressed file adds 50% to its size (each rounded to the nearest 
integer number of bytes), we would like to know for a given size of the SHAR 
file how many floppies John needs. </P>
<H3>Input Specification</H3>
<P>The input file contains several test cases. Each test case consists of a 
single line containing one integer <I>s</I> (0 &lt;= <I>s </I>&lt;= 
1,000,000,000), specifying the size of the SHAR file in bytes. </P>
<P>The file ends with a file having <I>s = 0</I>. Do not generate output for 
this file. </P>
<H3>Output Specification</H3>
<P>For each test case, first output the number of the test case (<TT>`File 
#1'</TT>, <TT>`File #2'</TT>, etc.), followed by a line that contains the 
minimal number of floppies needed for the transfer and a blank line. Adhere to 
the format shown below in the sample output. </P>
<H3>Input Sample</H3><PRE>1000000
10000000
100000000
0</PRE>
<H3>Output for Sample Input</H3><PRE>File #1
John needs 1 floppies.


File #2
John needs 5 floppies.


File #3
John needs 41 floppies.</PRE>
<P>[End of Problem A] </P>
<P>
<HR>

<P></P>
<H2><A name=Golf></A>Problem B: Golf</H2>
<P>
<TABLE border=0 cellPadding=0 cellSpacing=2>
  <TBODY>
  <TR>
    <TD align=right><B>Source file:<BR>Input file:</B></TD>
    <TD><TT><FONT 
  size=+1>golf.pas/golf.c/golf.C<BR>golf.in</FONT></TT></TD></TR></TBODY></TABLE></P>
<P>Whoever wants to learn the game of golf has to cope with several oddities 
first (as with every other game that originates from Great Britain). One of them 
is the way to count the number of strokes a player needed to put his golf ball 
in a hole. There is a ``par'' for every hole, and practically all scores are 
expressed relative to the par. Examples are terms like ``par'', ``birdie'' (1 
below par) and ``bogey'' (1 over par), and, in rare cases, ``hole-in-one'', 
``eagle'' (2 below par), ``double eagle'' (3 below par) and ``double bogey'' (2 
over par). Although it is possible to get worse than a double bogey and there 
are names for those, too, we will just assume that most people will cheat and 
just write down ``double bogey'', anyway. </P>
<P>John has just joined a golf club and is new to all these names. On his first 
visit to the golf course, he just fills in the number of strokes for every hole 
in his score card. He now needs these numbers translated into their proper 
names. </P>
<P>As John's caddy, you are to write a program that, given the par for a hole 
and the number of strokes John wrote down, prints the proper name of the score. 
Make sure that you write a ``hole-in-one'' even if another description would fit 
as well. </P>
<H3>Input Specification</H3>
<P>The input file consists of several test cases. Each test case consists of a 
single line that contains two integers <I>p</I> and <I>s</I>, where <I>p</I> is 
the par for the hole (either 3, 4, or 5) and <I>s</I> is the number of strokes 
John needed for that hole, 1 &lt;= <I>s</I> &lt; 20. </P>
<P>The input ends with a hole having <I>p </I>= 0, which should not be 
processed. </P>
<H3>Output Specification</H3>
<P>For each test case, output a line containing the number of the hole 
(<TT>`Hole #1'</TT>, <TT>`Hole #2'</TT>, etc.). </P>
<P>On the next line print the proper name of the score, followed by a period, 
i.e. one of <TT>`Hole-in-one.'</TT>, <TT>`Double eagle.'</TT>, 
<TT>`Eagle.'</TT>, <TT>`Birdie.'</TT>, <TT>`Par.'</TT>, <TT>`Bogey.'</TT>, or 
<TT>`Double Bogey.'</TT>. </P>
<P>Output a blank line after each hole. </P>
<H3>Sample Input</H3><PRE>5 3
3 1
4 7
0 0</PRE>
<H3>Output for Sample Input</H3><PRE>Hole #1
Eagle.


Hole #2
Hole-in-one.


Hole #3
Double Bogey.</PRE>
<P>[End of Problem B]</P>
<P>
<HR>

<P></P>
<H2><A name=Reverse></A>Problem C: Reverse Text</H2>
<P>
<TABLE border=0 cellPadding=0 cellSpacing=2>
  <TBODY>
  <TR>
    <TD align=right><B>Source file:<BR>Input file:</B></TD>
    <TD><TT><FONT 
      size=+1>reverse.pas/reverse.c/reverse.C<BR>reverse.in</FONT></TT></TD></TR></TBODY></TABLE></P>
<P>In most languages, text is written from left to right. However, there are 
other languages where text is read and written from right to left. As a first 
step towards a program that automatically translates from a left-to-right 
language into a right-to-left language and back, you are to write a program that 
changes the direction of a given text. </P>
<H3>Input Specification</H3>
<P>The input file contains several test cases. The first line contains an 
integer specifying the number of test cases in the file. Each test case consists 
of a single line of text which contains at most 70 characters. However, the 
newline character at the end of each line is not considered to be part of the 
line. </P>
<H3>Output Specification</H3>
<P>For each test case, print a line containing the characters of the input line 
in reverse order. </P>
<H3>Sample Input</H3><PRE>3
Frankly, I don't think we'll make much
money out of this scheme.
madam I'm adam</PRE>
<H3>Output for Sample Input</H3><PRE>hcum ekam ll'ew kniht t'nod I ,ylknarF
.emehcs siht fo tuo yenom
mada m'I madam</PRE>
<P>[End of Problem C]</P>
<P>
<HR>

<P></P>
<ADDRESS><A href="http://www.acm.inf.ethz.ch/">Home Page</A>. <A 
href="mailto:acm@iet.ethz.ch">Comments</A>. Last update: November 27, 1996 
(eos). </ADDRESS></BODY></HTML>
