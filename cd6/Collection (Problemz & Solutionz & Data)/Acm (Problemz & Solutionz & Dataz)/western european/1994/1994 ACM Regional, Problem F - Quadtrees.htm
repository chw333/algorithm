<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0048)http://www.karrels.org/Ed/ACM/weur94/prob_f.html -->
<HTML><HEAD><TITLE>1994 ACM Regional, Problem F - Quadtrees</TITLE>
<META content="text/html; charset=ks_c_5601-1987" http-equiv=Content-Type><LINK 
href="mailto:Ed@Tool.com" rev=made>
<META content="MSHTML 5.00.3315.2870" name=GENERATOR></HEAD>
<BODY><EM>Not an official ACM page</EM> <BR>[<A 
href="http://www.karrels.org/Ed/ACM/weur94/prob_g.html">Problem G</A> | <A 
href="http://www.karrels.org/Ed/ACM/weur94/index.html">1994 Western European 
Regional problem set</A> | <A href="http://www.karrels.org/Ed/ACM/index.html">My 
ACM problem archive</A> | <A href="http://www.karrels.org/Ed/index.html">my home 
page</A>] 
<HR>

<CENTER>
<H4>1994-1995 ACM International Collegiate Programming Contest<BR>Western 
European Regional</H4>
<H1>Problem G </H1>
<H2>Quadtrees </H2></CENTER>A quadtree is a representation format used to encode 
images. The fundamental idea behind the quadtree is that any image can be split 
into four quadrants. Each quadrant may again be split in four sub quadrants, 
etc. In the quadtree, the image is represented by a parent node, while the four 
quadrants are represented by four child nodes, in a predetermined order. 
<P>Of course, if the whole image is a single color, it can be represented by a 
quadtree consisting of a single node. In general, a quadrant needs only to be 
subdivided if it consists of pixels of different colors. As a result, the 
quadtree need not be of uniform depth. 
<P>A modern computer artist works with black-and-white images of 32¡¿32 units, 
for a total of 1024 pixels per image. One of the operations he performs is 
adding two images together, to form a new image. In the resulting image a pixel 
is black if it was black in at least one of the component images, otherwise it 
is white. 
<P>This particular artist believes in what he calls the <EM>preferred 
fullness</EM>: for an image to be interesting (i.e. to sell for big bucks) the 
most important property is the number of filled (black) pixels in the image. So, 
before adding two images together, he would like to know how many pixels will be 
black in the resulting image. Your job is to write a program that, given the 
quadtree representation of two images, calculates the number of pixels that are 
black in the image, which is the result of adding the two images together. 
<P>In the figure, the first example is shown (from top to bottom) as image, 
quadtree, pre-order string (defined below) and number of pixels. The quadrant 
numbering is shown at the top of the figure. 
<P>
<CENTER><IMG src="1994 ACM Regional, Problem F - Quadtrees.files/quadtree.gif"> 
</CENTER>
<H3>Input</H3>The first line of input specifies the number of test cases (N) 
your program has to process. The input for each test case is two strings, each 
string on its own line. The string is the pre-order representation of a 
quadtree, in which the letter '<CODE>p</CODE>' indicates a parent node, the 
letter '<CODE>f</CODE>' (full) a black quadrant and the letter '<CODE>e</CODE>' 
(empty) a white quadrant. It is guaranteed that each string represents a valid 
quadtree, while the depth of the tree is not more than 5 (because each pixel has 
only one color). 
<H3>Output</H3>For each test case, print on one line the text '<CODE>There are 
<EM>X</EM> black pixels.</CODE>', where <EM>X</EM> is the number of black pixels 
in the resulting image. 
<H3>Sample Input</H3><PRE>3
ppeeefpffeefe
pefepeefe
peeef
peefe
peeef
peepefefe
</PRE>
<H3>Sample Output</H3><PRE>There are 640 black pixels.
There are 512 black pixels.
There are 384 black pixels.
</PRE>
<HR>
This page maintained by <A href="mailto:Ed@Tool.com">Ed Karrels</A>.<BR>Last 
updated September 20, 1999 </BODY></HTML>
