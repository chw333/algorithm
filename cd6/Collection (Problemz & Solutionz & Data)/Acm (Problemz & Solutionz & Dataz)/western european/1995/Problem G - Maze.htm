<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0048)http://www.karrels.org/Ed/ACM/weur95/prob_g.html -->
<HTML><HEAD><TITLE>Problem G - Maze</TITLE>
<META content="text/html; charset=ks_c_5601-1987" http-equiv=Content-Type><LINK 
href="mailto:Ed@Tool.com" rev=made>
<META content="MSHTML 5.00.3315.2870" name=GENERATOR></HEAD>
<BODY><EM>Not an official ACM page</EM> <BR>[<A 
href="http://www.karrels.org/Ed/ACM/weur95/prob_h.html">Problem H</A> | <A 
href="http://www.karrels.org/Ed/ACM/weur95/index.html">1995 Western Europe 
problem set</A> | <A href="http://www.karrels.org/Ed/ACM/index.html">Ed's 
programming contest problem archive</A> | <A 
href="http://www.karrels.org/Ed/index.html">my home page</A>] 
<HR>

<CENTER>
<H3>1995-1996 ACM International Collegiate Programming Contest<BR>Western 
European Regional</H3>
<H1>Problem G </H1>
<H2>Maze </H2></CENTER>Johnny likes solving puzzles. He especially likes drawing 
and solving mazes. However, solving a maze he has drawn himself is too easy for 
him. 
<P>Since his computer is his best friend, he figures that he needs a program 
drawing the mazes for him. So he starts thinking about an algorithm performing 
this difficult task for him and he comes up with 'Johnny's Simple Algorithm.' 
<P>
<H3>Johnny's Simple Algorithm</H3>You start with a <EM>M</EM> ¡¿ <EM>N</EM> grid, 
where <EM>M</EM> is the number of rows and <EM>N</EM> is the number of columns 
of the grid. Initially, no two cells of the grid are connected to each other, so 
every cell is surrounded by walls on all four sides. The walls consist of an 
underscore ('_') for a horizontal wall, and a vertical bar ('|') for a vertical 
one. For example, if <EM>M</EM> = 3 and <EM>N</EM> = 4, the grid looks like 
this: 
<BLOCKQUOTE><PRE> _ _ _ _
|_|_|_|_|
|_|_|_|_|
|_|_|_|_|
</PRE></BLOCKQUOTE>Every cell of the grid has unique coordinates (<EM>p</EM>, 
<EM>q</EM>). The lower left corner in the example is (1, 1), the upper right 
corner is (3, 4). 
<P>After choosing the dimensions of the maze, you choose a starting cell. From 
now on you keep track of a list of <EM>pending</EM> cells, which initially 
contains only one cell (the starting cell), and you repeat the following steps: 
<OL>
  <LI>If the list is empty, you stop. The maze is ready. 
  <LI>Else, you consider the most recently added cell in the list (call this 
  cell <EM>AC</EM>). If this cell (at the end of the list) has no 
  <EM>unvisited</EM> neighbor cells then you remove this cell from the list. 
  Every cell has at most 4 neighbor cells: on the right, left, above and below. 
  A cell is unvisited if it has never been added to the list. 
  <LI>If <EM>AC</EM> has at least one unvisited neighbor cell, you choose one of 
  the unvisited neighbor cells (call this cell <EM>NC</EM>), remove the wall 
  between <EM>AC</EM> and <EM>NC</EM> and add <EM>NC</EM> to the end of the 
  list. </LI></OL>
<P>Johnny makes a nice little program using this algorithm and it works fine, 
but Johnny is not completely satisfied with the results. He is a demanding 
little boy and in his opinion the so-called <EM>branching factor</EM> of the 
maze is too low, i.e. the generated mazes contain very long paths and too few 
crossings. Therefore, the mazes are still too easy to solve for him. 
<P>A little trick can be applied to Johnny's Simple Algorithm, giving much 
better results. Johnny does not know it, but you will, since it will be 
explained below! 
<P>The idea behind the trick is to sometimes change the order of the cells in 
the list. This avoids long paths and results in more branches. Changing the 
order of the cells in the list is done by 'flipping' part of the list. A 
<EM>flip</EM> can be specified by giving the position of a cell in the list 
(where the first cell has position 1) and consists of reversing the sub-list 
starting at the specified cell and ending with the last cell in the list. 
<P>For example, if the list consists of the following cells: 
<BLOCKQUOTE>(1,1) (1,2) (2,2) (3,2) (3,3)</BLOCKQUOTE>then a flip with starting 
cell number 2 results in: 
<BLOCKQUOTE>(1,1) (3,3) (3,2) (2,2) (1,2)</BLOCKQUOTE>Now, we will reveal 
`Johnny's Advanced Algorithm.' 
<P>
<H3>Johnny's Advanced Algorithm</H3>The algorithm is pretty much the same as 
`Johnny's Simple Algorithm,' only sometimes part of the list is flipped. The 
steps you repeat after choosing the dimensions of the maze, choosing the 
starting cell and adding this cell to the list are: 
<OL>
  <LI>If the list of cells is empty, you stop. The maze is ready. 
  <LI>Else you consider the last cell in the list. If this cell has no unvisited 
  neighbor cells, then you remove this cell from the list. 
  <LI>Otherwise, you read a command. If this command is:<BR>
  <DL compact>
    <DT>'F <EM>n</EM>'
    <DD>you flip the list, starting at position n. 
    <DT>'U' 
    <DD>you go up: you remove the wall between the last cell in the list and the 
    cell above it. The cell above the last cell in the list is added to the 
    list. 
    <DT>'D' 
    <DD>you go down. 
    <DT>'L' 
    <DD>you go left. 
    <DT>'R' 
    <DD>you go right. </DD></DL></LI></OL>
<P>Since you are taking part in a programming contest, we ask you to write a 
program generating nice mazes for Johnny, using 'Johnny's Advanced Algorithm,' 
to make him happy again. The maximum size of a maze is 39¡¿39. 
<P>
<H3>Input Specification </H3>The first line of the input contains the number of 
test cases. The input for every test case is divided into three parts: 
<UL>
  <LI>The first line contains two integer values <EM>M</EM> and <EM>N</EM>, 
  specifying the dimensions of the maze: the number of rows <EM>M</EM> followed 
  by the number of columns <EM>N</EM>. 
  <LI>The second line contains the coordinates of the starting point (again, row 
  followed by column). 
  <LI>The next lines each contain a command. A command is one of the upper case 
  characters 'F', 'U', 'D', 'L,' and 'R', appearing at the start of a line. An 
  'F' character is followed by a space and an integer (the starting position of 
  the flip.) </LI></UL>The input for each test case contains exactly the number of 
commands needed for that maze. 
<P>
<H3>Output Specification </H3>The resulting mazes should be printed using spaces 
(' '), underscores ('_'), vertical bars ('|') and end-of-line characters. No 
unnecessary whitespace should be printed. The mazes should be followed by one 
blank line. 
<P>
<H3>Example Input</H3><PRE>2
3 3
1 1
U
U
R
D
D
R
U
U
3 4
2 1
R
U
L
F 2
R
U
R
D
D
F 4
D
L
L
</PRE>
<H3>Example Output</H3><PRE> _ _ _
|   | |
| | | |
|_|_ _|

 _ _ _ _
|_  |   |
|_ _  | |
|_ _ _|_|

</PRE>
<HR>
This page maintained by <A href="mailto:Ed@Tool.com">Ed Karrels</A>.<BR>Last 
updated January 3, 1998 </BODY></HTML>
