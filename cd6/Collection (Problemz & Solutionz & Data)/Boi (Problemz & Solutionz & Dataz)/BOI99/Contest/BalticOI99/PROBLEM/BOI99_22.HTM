<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Mârtiòð Opmanis">
   <meta name="GENERATOR" content="Mozilla/4.5 [en] (Win95; I) [Netscape]">
   <title>boi'99 Day 2 Task 2</title>
</head>
<body background="backgrnd.gif">
<img SRC="boi99bap.GIF" height=38 width=778>
<p><b><font size=+1>"NEW FUN" (LATVIA)</font></b>
<p>Programmers often are asked to rewrite old program and the new program
version must keep its functionality. It is nice, if such program is well
documented and source code is available. But not always life is so lucky.
<br>You must rewrite earlier written function FUN about which is known
the following:
<br>1) FUN's arguments are 4 positive integers a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>
and a<sub>4</sub>,
<br>2) FUN's value is one of its arguments values,
<br>3) FUN performs one function of the following kind:
<center>
<p><font face="Courier New">IF <i>a<sub>i</sub> op a<sub>j</sub></i> THEN
FUN:=<i>a<sub>k</sub></i> ELSE FUN:=<i>a<sub>m</sub></i> ;</font></center>

<p>where possible <i>op</i> values are<font face="Symbol">&lt; , &pound;
, > , &sup3; , = , &sup1;</font><font face="Times New Roman BaltRim">,
and </font><font face="Courier New">1</font><font face="Symbol"> &pound;</font><font face="Courier New">i,j,k,m</font><font face="Symbol">&pound;</font><font face="Courier New">4</font><font face="Times New Roman BaltRim">.</font>
<p><font face="Times New Roman BaltRim">If </font><font face="Courier New"><font size=+0>i=1,
j=2, k=4, m=1</font></font><font face="Times New Roman BaltRim">, and <i>op</i>
is '</font><font face="Symbol">&sup1;</font><font face="Times New Roman BaltRim">'</font>,
then we get function
<p><font face="Courier New">IF a<sub>1</sub></font><font face="Symbol">&sup1;</font><font face="Courier New">a<sub>2</sub>
THEN FUN:=a<sub>4</sub> ELSE FUN:=a<sub>1</sub>;(</font><font face="Wingdings">&para;</font><font face="Courier New">)</font>
<p>and we will obtain, for example,<font size=+0><font face="Courier New">FUN(2,1,1,3)
= 3, FUN(4,4,2,3) = 4</font><font face="Times New Roman BaltRim">.</font></font>
<p>It is known, that in practice the existing version is too slow and works
properly only if its argument values doesn't exceed 5. You are asked to
write a new function version which has to work properly for all positive
integer values which do not exceed 32767.
<p>Old FUN version is written so, that this, exactly which function is
performed depends on data file in the current catalog FUN.DAT - so it will
not be enough if you write a version which performs the same function as
old FUN for one fixed FUN.DAT. New version must work properly for any provided
FUN.DAT .
<p>Your program will always work in the same environment as old FUN, so
you may include in your program old FUN calls (of course, keeping in mind
restrictions for argument values). You can asume that in the current catalog
always will be valid file FUN.DAT and your new program never will be used
without it.
<p>You must write program which performs the same function as old FUN (for
any provided FUN.DAT) and for argument values given in input file calculates
function values and output them to output file.
<p>The execution time of a call to the old FUN depends neither on the argument
values nor on the file FUN.DAT.
<p><b><i>Input data</i></b>
<p>In the first line of text file NEWFUN.IN number of argument sets N<font face="Times New Roman BaltRim">
(1</font><font face="Symbol">&pound;</font><font face="Times New Roman BaltRim">N</font><font face="Symbol">&pound;</font><font face="Times New Roman BaltRim">1000)
</font>is
given. In the each of the following N lines one argument set (four positive
integer values separated by single space characters) is given. All argument
values are less or equal to 32767.
<p><b><i>Output data</i></b>
<p>Text file NEWFUN.OUT must contain exactly N rows. In the i-th file row
one positive integer - "new FUN" value for i-th argument set must be written.
<p><b><i>Technical information for Pascal users</i></b>
<p>On the diskette in the subdirectory <font face="Courier New">/FUN_PAS</font>
the following files are given:
<ul>
<li>
<font face="Courier New">funit.tpu</font> - unit which contains <font face="Courier New">FUN</font>
(this unit contestant may include in his program);</li>

<li>
<font face="Courier New">main.pas</font> - example of program which calls
function <font face="Courier New">FUN</font> ( <font face="Courier New">funit.tpu
</font>is
used);</li>

<li>
<font face="Courier New">FUN.DAT</font>, which corresponds to the function
given in example (<font face="Wingdings">&para;</font>).</li>
</ul>
<b><i>Technical information for C/C++ users</i></b>
<p>On the diskette in the subdirectory <font face="Courier New">/FUN_C</font>
the following files are given:
<ul>
<li>
<font face="Courier New">funit.obj</font> - unit which contains <font face="Courier New">FUN</font>
(this unit contestant may include in his program);</li>

<li>
<font face="Courier New">funit.h</font> - header<i> </i>file which corresponds
to <tt><font size=+1>funit.obj</font></tt>;</li>

<li>
<font face="Courier New">main.c</font> (and <font face="Courier New">main.cpp</font>)
- example of program which calls function <font face="Courier New">FUN</font>
( <font face="Courier New">funit.obj </font>is used);</li>

<li>
<font face="Courier New">democ.prj</font> (and <font face="Courier New">democpp.prj</font>)
- example of project, containing <font face="Courier New">main.c</font>
(or <font face="Courier New">main.cpp</font>) and <font face="Courier New">funit.obj</font>;</li>

<li>
<font face="Courier New">FUN.DAT</font>, which corresponds to the function
given in example (<font face="Wingdings">&para;</font>).</li>
</ul>
For proper <font face="Courier New">funit.obj</font> using, you must:
<ul>
<li>
open an existing or new project (<i><font face="Courier New"><font size=+0>Project|Open</font></font></i>);</li>

<li>
open project window (if it is not already on the desktop) (<i><font face="Courier New"><font size=+0>Window|Project</font></font></i>);</li>

<li>
include a source code of your program and module <font face="Courier New">funit.obj</font>
in the project (if these files are not already included) (<i><font face="Courier New"><font size=+0>Project|Add</font></font></i>);</li>

<li>
while compiling project you must be sure that compiler option <i><font face="Courier New"><font size=+0>Options|Compiler|Code
generation|Model</font></font></i> is switched to <i><font face="Courier New"><font size=+0>Large</font></font></i>
(because <font face="Courier New">funit.obj</font> is compiled with such
option).</li>
</ul>
<b><i>Example</i></b>
<dir>Input data (File NEWFUN.IN)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Output data(File NEWFUN.OUT)
<br><font face="Courier New"><font size=+0>5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3</font></font>
<br><font face="Courier New"><font size=+0>2 1 1 3&