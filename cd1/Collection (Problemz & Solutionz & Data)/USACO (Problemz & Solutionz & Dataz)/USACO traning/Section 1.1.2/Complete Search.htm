<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0057)http://ace.delos.com/usacotext/s=1.1.2/a=v03N4FpSRCg/comp -->
<HTML><HEAD><TITLE>Complete Search</TITLE>
<META content="text/html; charset=ks_c_5601-1987" http-equiv=Content-Type>
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY background="Complete Search.files/bg3.jpeg"><IMG height=118 
src="Complete Search.files/cow1.jpeg" width=742> 
<CENTER><B><FONT size=4>Complete Search</FONT></B></CENTER>
<H4>The Idea</H4>
<P>Solving a problem using complete search is based on the ``Keep It Simple, 
Stupid'' principle. The goal of solving contest problems is to write programs 
that work in the time allowed, whether or not there is a faster algorithm. 
<P>Complete search exploits the brute force, straight-forward, try-them-all 
method of finding the answer. This method should almost always be the first 
algorithm/solution you consider. If this works within time and space 
constraints, then do it: it's easy to code and usually easy to debug. This means 
you'll have more time to work on all the hard problems, where brute force 
doesn't work quickly enough. 
<P>In the case of a problem with only fewer than a couple million possibilities, 
iterate through each one of them, and see if the answer works. 
<H4>Careful, Careful </H4>
<P>Sometimes, it's not obvious that you use this methodology. 
<H4>Problem: Party Lamps [IOI 98]</H4>
<P>You are given N lamps and four switches. The first switch toggles all lamps, 
the second the even lamps, the third the odd lamps, and last switch toggles 
lamps 1, 4, 7, 10, ... . 
<P>Given the number of lamps, <I>N</I>, the number of button presses made (up to 
10,000), and the state of some of the lamps (e.g., lamp 7 is off), output all 
the possible states the lamps could be in. 
<P>Naively, for each button press, you have to try 4 possibilities, for a total 
of 4<SUP>10000</SUP> (about 10<SUP>6020</SUP> ), which means there's no way you 
could do complete search (this particular algorithm would exploit recursion). 
<P>Noticing that the order of the button presses does not matter gets this 
number down to about 10000<SUP>4</SUP> (about 10<SUP>16</SUP> ), still too big 
to completely search (but certainly closer by a factor of over 10<SUP>6000</SUP> 
). 
<P>However, pressing a button twice is the same as pressing the button no times, 
so all you really have to check is pressing each button either 0 or 1 times. 
That's only 2<SUP>4</SUP> = 16 possibilities, surely a number of iterations 
solvable within the time limit. 
<H4>Problem 3: The Clocks [IOI 94]</H4>
<P>A group of nine clocks inhabits a 3 x 3 grid; each is set to 12:00, 3:00, 
6:00, or 9:00. Your goal is to manipulate them all to read 12:00. Unfortunately, 
the only way you can manipulate the clocks is by one of nine different types of 
move, each one of which rotates a certain subset of the clocks 90 degrees 
clockwise. 
<P>Find the shortest sequence of moves which returns all the clocks to 12:00. 
<P>The ``obvious'' thing to do is a recursive solution, which checks to see if 
there is a solution of 1 move, 2 moves, etc. until it finds a solution. This 
would take 9<SUP><I>k</I></SUP> time, where <I>k</I> is the number of moves. 
Since <I>k</I> might be fairly large, this is not going to run with reasonable 
time constraints. 
<P>Note that the order of the moves does not matter. This reduces the time down 
to <I>k<SUP>9</SUP> </I>, which isn't enough of an improvement. 
<P>However, since doing each move 4 times is the same as doing it no times, you 
know that no move will be done more than 3 times. Thus, there are only 
4<SUP>9</SUP> possibilities, which is only 262,072, which, given the rule of 
thumb for run-time of more than 10,000,000 operations in a second, should work 
in time. The brute-force solution, given this insight, is perfectly adequate. 
<H4>Sample Problems</H4>
<H5>Milking Cows [USACO 1996 Competition Round]</H5>
<P>Given a cow milking schedule (Farmer A milks from time 300 to time 1000, 
Farmer B from 700 to 1200, etc.), calculate 
<UL>
  <LI>The longest time interval in which at least one cow was being milked 
  <LI>The longest time interval in which no cow is being milked </LI></UL>
<H5>Perfect Cows &amp; Perfect Cow Cousins [USACO 1995 Final Round]</H5>
<P>A perfect number is one in which the sum of the proper divisors add up to the 
number. For example, 28 = 1 + 2 + 4 + 7 + 14. A perfect pair is a pair of 
numbers such that the sum of the proper divisor of each one adds up to the 
other. There are, of course, longer perfect sets, such that the sum of the 
divisors of the first add up to the second, the second's divisors to the third, 
etc., until the sum of the last's proper divisors add up to the first number. 
<P>Each cow in Farmer John's ranch is assigned a serial number. from 1 to 32000. 
A perfect cow is one which has a perfect number as its serial. A group of cows 
is a set of perfect cow cousins if their serial numbers form a perfect set. Find 
all perfect cows and perfect cow cousins. <BR><BR>
<CENTER><A href="http://ace.delos.com/usacogate?a=v03N4FpSRCg">USACO Gateway</A> 
| <A href="mailto:kolstad@ace.delos.com">Comment or Question</A> 
</CENTER></BODY></HTML>
