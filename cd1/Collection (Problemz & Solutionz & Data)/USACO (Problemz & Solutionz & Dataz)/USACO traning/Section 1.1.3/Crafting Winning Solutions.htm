<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0060)http://ace.delos.com/usacotext/s=1.1.3.4/a=779LkjmZYPb/craft -->
<HTML><HEAD><TITLE>Crafting Winning Solutions</TITLE>
<META content="text/html; charset=ks_c_5601-1987" http-equiv=Content-Type>
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY background="Crafting Winning Solutions.files/bg3.jpeg"><IMG height=118 
src="Crafting Winning Solutions.files/cow1.jpeg" width=742> 
<CENTER><B><FONT size=7>Crafting Winning Solutions</FONT></B><BR></CENTER>
<P>A good way to get a competitive edge is to write down a game plan for what 
you're going to do in a contest round. This will help you script out your 
actions, in terms of what to do both when things go right and when things go 
wrong. This way you can spend your thinking time in the round figuring out 
programming problems and not trying to figure out what the heck you should do 
next... it's sort of like precomputing your reactions to most situations. 
<P>Mental preparation is also important. 
<H4>Game Plan For A Contest Round</H4>
<P>Read through ALL the problems FIRST; sketch notes with algorithm, complexity, 
the numbers, data structs, tricky details, ... 
<UL>
  <LI>Brainstorm many possible algorithms - then pick the stupidest that works! 
  <LI>DO THE MATH! (space &amp; time complexity, and plug in actual expected and 
  worst case numbers) 
  <LI>Try to break the algorithm - use special (degenerate?) test cases 
  <LI>Order the problems: shortest job first, in terms of your effort (shortest 
  to longest: done it before, easy, unfamiliar, hard) </LI></UL>
<P>Coding a problem - For each, one at a time: 
<UL>
  <LI>Finalize algorithm 
  <LI>Create test data for tricky cases 
  <LI>Write data structures 
  <LI>Code the input routine and test it (write extra output routines to show 
  data?) 
  <LI>Code the output routine and test it 
  <LI>Stepwise refinement: write comments outlining the program logic 
  <LI>Fill in code and debug <I>one section at a time</I> 
  <LI>Get it working &amp; verify correctness (use trivial test cases) 
  <LI>Try to break the code - use special cases for code correctness 
  <LI>Optimize progressively - only as much as needed, and keep all versions 
  (use hard test cases to figure out actual runtime) </LI></UL>
<H4>Time management strategy and "damage control" scenarios </H4>
<P>Have a plan for what to do when various (foreseeable!) things go wrong; 
imagine problems you might have and figure out how you want to react. The 
central question is: "When do you spend more time debugging a program, and when 
do you cut your losses and move on?". Consider these issues: 
<UL>
  <LI>How long have you spent debugging it already? 
  <LI>What type of bug do you seem to have? 
  <LI>Is your algorithm wrong? 
  <LI>Do you data structures need to be changed? 
  <LI>Do you have any clue about what's going wrong? 
  <LI>A short amount (20 mins) of debugging is better than switching to anything 
  else; but you might be able to solve another from scratch in 45 mins. 
  <LI>When do you go back to a problem you've abandoned previously? 
  <LI>When do you spend more time optimizing a program, and when do you switch? 
  <LI>Consider from here out - forget prior effort, focus on the future: how can 
  you get the most points in the next hour with what you have? </LI></UL>
<P>Have a checklist to use before turning in your solutions: 
<UL>Code freeze five minutes before end of contest? 
  <LI>Turn asserts off. 
  <LI>Turn off debugging output. 
  <LI>Turn on all optimizations. 
  <LI>Make sure input and output are to correct filenames. 
  <LI>Make sure the input and output formats are correct. 
  <LI>Recompile and test once more. 
  <LI>Copy files to correct locations (floppy?) with correct names. </LI></UL>
<H4>Tips &amp; Tricks</H4>
<UL>
  <LI>Brute force it when you can 
  <LI>KISS: Simple is smart! 
  <LI>Hint: focus on <I>limits</I> (specified in problem statement) 
  <LI>Waste memory when it makes your life easier (if you can get away with it) 
  <LI>Don't delete your extra debugging output, comment it out 
  <LI>Optimize progressively, and only as much as needed 
  <LI>Keep all working versions! 
  <LI>Code to debug: 
  <UL type=square>
    <LI>whitespace is good, 
    <LI>use meaningful variable names, 
    <LI>don't reuse variables, 
    <LI>stepwise refinement, 
    <LI>COMMENT BEFORE CODE. </LI></UL>
  <LI>Avoid pointers if you can 
  <LI>Avoid dynamic memory like the plague: statically allocate everything. 
  <LI>Try not to use floating point; if you have to, put tolerances in 
  everywhere (never test equality) 
  <LI>Comments on comments: 
  <UL type=square>
    <LI>Not long prose, just brief notes 
    <LI>Explain high-level functionality: ++i; /* increase the value of i by */ 
    is worse than useless 
    <LI>Explain code trickery 
    <LI>Delimit &amp; document functional sections 
    <LI>As if to someone intelligent who knows the problem, but not the code 
    <LI>Anything you had to think about 
    <LI>Anything you looked at even once saying, "now what does that do again?" 
    <LI>Always comment order of array indices </LI></UL>
  <LI>Keep a log of your performance in each contest: successes, mistakes, and 
  what you could have done better; use this to rewrite and improve your game 
  plan! </LI></UL>
<H4>Complexity</H4>
<H5>Basics and order notation </H5>
<P>The fundamental basis of complexity analysis revolves around the notion of 
``big oh'' notation, for instance: O(<I>N</I>). This means that the algorithm's 
execution speed or memory usage will double when the problem size doubles. An 
algorithm of O(<I>N <SUP>2</SUP></I>) will run about four times slower (or use 
4x more space) when the problem size doubles. Constant-time or space algorithms 
are denoted O(1). This concept applies to time and space both; here we will 
concentrate discussion on time. 
<P>One deduces the O() run time of a program by examining its loops. The most 
nested (and hence slowest) loop dominates the run time and is the only one 
mentioned when discussing O() notation. A program with a single loop and a 
nested loop (presumably loops that execute <I>N</I> times each) is O(<I>N 
<SUP>2</SUP></I>), even though there is also a O(<I>N</I>) loop present. 
<P>Of course, recursion also counts as a loop and recursive programs can have 
orders like O(<I>b <SUP>N</SUP></I>), O(<I>N!</I>), or even O(<I>N 
<SUP>N</SUP></I>). 
<H4>Rules of thumb </H4>
<UL>
  <LI>When analyzing an algorithm to figure out how long it might run for a 
  given dataset, the first rule of thumb is: modern (1999) computers can deal 
  with 10M actions per second. In a five second time limit program, about 50M 
  actions can be handled. Really well optimized programs might be able to double 
  or even quadruple that number. Challenging algorithms might only be able to 
  handle half that much. 
  <LI>640K is a really tight memory constraint. Happily, the 1999-2000 season is 
  the last time this constraint applies. 
  <LI>2<SUP>10 </SUP>~approx~ 10 <SUP>3 </SUP>
  <LI>If you have <I>k</I> nested loops running about <I>N</I> iterations each, 
  the program has O(<I>N <SUP>k</SUP></I>) complexity. 
  <LI>If your program is recursive with <I>b</I> recursive calls per level and 
  has <I>l</I> levels, the program O(<I>b <SUP>l</SUP></I>) complexity. 
  <LI>Bear in mind that there are <I>N!</I> permutations and <I>2 
  <SUP>n</SUP></I> subsets or combinations of <I>N</I> elements when dealing 
  with those kinds of algorithms. 
  <LI>The best times for sorting <I>N</I> elements are O(<I>N</I> log<I> N</I>). 

  <LI><B>DO THE MATH!</B> Plug in the numbers. </LI></UL>
<H4>Examples </H4>
<P>A single loop with <I>N</I> iterations is O(<I>N</I>): <BR><TT><FONT 
size=2><BR>&nbsp;1&nbsp;&nbsp;sum&nbsp;=&nbsp;0<BR>&nbsp;2&nbsp;&nbsp;for&nbsp;i&nbsp;=&nbsp;1&nbsp;to&nbsp;n<BR>&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;=&nbsp;sum&nbsp;+&nbsp;i<BR></FONT></TT>
<P>A double nested loop is often O(<I>N <SUP>2</SUP></I>): <BR><TT><FONT 
size=2><BR>#&nbsp;fill&nbsp;array&nbsp;a&nbsp;with&nbsp;N&nbsp;elements<BR>1&nbsp;for&nbsp;i&nbsp;=&nbsp;1&nbsp;to&nbsp;n-1<BR>2&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;=&nbsp;i&nbsp;+&nbsp;1&nbsp;to&nbsp;n<BR>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a[i]&nbsp;&gt;&nbsp;a[j])<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap&nbsp;(a[i],&nbsp;a[j])<BR></FONT></TT>Note 
that even though this loop executes <I>N x (N+1) / 2</I> iterations of the if 
statement, it is O(<I>N <SUP>2</SUP></I>) since doubling <I>N</I> quadruples the 
execution times. 
<P>Consider this well balanced binary tree with four levels: <BR><IMG 
src="Crafting Winning Solutions.files/craft1.gif"><BR>An algorithm that 
traverses a general binary tree will have complexity O(<I>2 <SUP>N</SUP></I>). 
<H4>Solution Paradigms </H4>
<H5>Generating vs. Filtering </H5>
<P>Programs that generate lots of possible answers and then choose the ones that 
are correct (imagine an 8-queen solver) are <I>filters</I>. Those that hone in 
exactly on the correct answer without any false starts are <I>generators</I>. 
Generally, filters are easier (faster) to code and run slower. Do the math to 
see if a filter is good enough or if you need to try and create a generator. 
<H5>Precomputation </H5>
<P>Sometimes it is helpful to generate tables or other data structures that 
enable the fastest possible lookup of a result. This is called 
<I>precomputation</I> (in which one trades space for time). One might either 
compile precomputed data into a program, calculate it when the program starts, 
or just remember results as you compute them. A program that must translate 
letters from upper to lower case when they are in upper case can do a very fast 
table lookup that requires no conditionals, for example. Contest problems often 
use prime numbers - many times it is practical to generate a long list of primes 
for use elsewhere in a program. 
<H5>Decomposition (The Hardest Thing At Programming Contests) </H5>
<P>While there are fewer than 20 basic algorithms used in contest problems, the 
challenge of combination problems that require a combination of two algorithms 
for solution is daunting. Try to separate the cues from different parts of the 
problem so that you can combine one algorithm with a loop or with another 
algorithm to solve different parts of the problem independently. Note that 
sometimes you can use the same algorithm twice on different (independent!) parts 
of your data to significantly improve your running time. 
<H5>Symmetries </H5>
<P>Many problems have symmetries (e.g., distance between a pair of points is 
often the same either way you traverse the points). Symmetries can be 2-way, 
4-way, 8-way, and more. Try to exploit symmetries to reduce execution time. 
<P>For instance, with 4-way symmetry, you solve only one fourth of the problem 
and then write down the four solutions that share symmetry with the single 
answer (look out for self-symmetric solutions which should only be output once 
or twice, of course). 
<H5>Forward vs. Backward </H5>
<P>Surprisingly, many contest problems work far better when solved backwards 
than when using a frontal attack. Be on the lookout for processing data in 
reverse order or building an attack that looks at the data in some order or 
fashion other than the obvious. 
<H5>Simplification </H5>
<P>Some problems can be rephrased into a somewhat different problem such that if 
you solve the new problem, you either already have or can easily find the 
solution to the original one; of course, you should solve the easier of the two 
only. Alternatively, like induction, for some problems one can make a small 
change to the solution of a slightly smaller problem to find the full answer. 
<BR><BR>
<CENTER><A href="mailto:grader@ace.delos.com">Submit Solution via Email</A> 
&nbsp;|&nbsp; <A href="http://ace.delos.com/usacogate?a=779LkjmZYPb">USACO 
Gateway </A>&nbsp;| &nbsp; <A href="mailto:kolstad@ace.delos.com">Comment or 
Question </A></CENTER></BODY></HTML>
