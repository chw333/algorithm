<html>
<head> <title>Problem 97: Amazing Barn</title> </head>
<body background="../../usaco/bg3.jpg">
<img src="../../usaco/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Amazing Barn</font></b><br>
</center>

<p>Consider a very strange barn that consists of N stalls, where N is some
prime number &lt;2500. Each stall has an ID number in the range 0..N-1.
One moves among the stalls according to these movement rules:

<ul>
<li>NORTH(stall) = (4*stall+ 7) MOD 11
<li>SOUTH(stall) = (3*stall+ 1) MOD 11
<li>EAST(stall)  = (5*stall+10) MOD 11
<li>WEST(stall)  = (9*stall+ 9) MOD 11
</ul><p>
If one is in stall 7, then one can move:
<ul>
<li>(n:2) North to stall 2 
<li>(s:0) South to stall 0
<li>(e:1) East to stall 1 
<li>(w:6) West to stall 6
</ul>

Each of stalls 0, 1, 2, and 6 is distance 1 from stall 7. Sometimes two or
more doors will lead to the same stall.

<p> Happily, if one goes north from 7 to stall 2, going south from 2 will
get back to stall 7.

<p> Given the number of stalls and the formulae above, find any of the
`most central' stalls. A stall is `most central' if it is among the stalls
that yields the lowest average distance using the best paths to all the
other stalls. (See the example below).

<p> Output the stall number and the length of the average path (four
decimal places).

<h3>PROGRAM NAME: amazing</h3>

<h3>INPUT FORMAT</h3>

<p> The input will be a single line of text with 9 numbers,
the prime number p and the eight values corresponding to the parameters
(b*stall + c) MOD p in the movement rules above (North, South, East West).

<h3>SAMPLE INPUT (FILE amazing.in)</h3>

Here is the input line for the sample above:
<pre>
11 4 7 3 1 5 10 9 9
</pre>

Here are the neighboring stalls for sample barn of 11 stalls:
<ul>
<li>0  e:10 w:9  n:7  s:1       
<li>1  e:4  w:7  n:0  s:4       
<li>2  e:9  w:5  n:4  s:7       
<li>3  e:3  w:3  n:8  s:10      
<li>4  e:8  w:1  n:1  s:2       
<li>5  e:2  w:10 n:5  s:5
<li>6  e:7  w:8  n:9  s:8
<li>7  e:1  w:6  n:2  s:0
<li>8  e:6  w:4  n:6  s:3
<li>9  e:0  w:2  n:10 s:6
<li>10 e:5  w:0  n:3  s:9
</ul>
Consider starting from stall 1.

<p> DISTANCE 1: You can get to stalls 4, 7, and 0 in one step from stall
1, so we say these stalls are distance 1 away.

<p> DISTANCE 2: These are all the stalls you can get to in exactly two
steps, so we see where we can get from each of the distance 1 stalls. From
stall 4 you can reach 8, 1, and 2; from stall 7 you can reach stalls 1, 6,
2 and 0; and from stall 0 you can reach stalls 10, 9, 7, and 1. Combining
these, stalls 0, 1, 2, 6, 7, 8, 9, and 10 are all reachable in 2 steps.
But stall 1 was the starting point, and there are shorter paths to 0 and
7; so the remaining stalls (2, 6, 8, 9) are all distance 2 away.

<p> DISTANCE 3: Similarly, we can find stalls 3 and 5 are distance 3 away
from stall 1 (and we've covered all the stalls at this point).

<p>
The following table summarizes the `shortest path' results: 
<pre>
        Dist.  Stalls
          1      3
          2      5
          3      2
</pre>
where `Dist.' is the best distance to some other stall and `Stalls' is the
number of stalls whose closest distance is `Dist.'. This table yields an
average path length of (1*3 + 2*5 + 3*2)/10 = 1.9000.

<p> Here is a summary of the number of stalls at various distances from
each of the stalls:
<pre>
                            S T A L L
Dist #0  #1  #2 #3  #4   #5   #6   #7   #8   #9  #10
 1  |4   3   4   2   3    2    3    4    3    4    4 \ no
 2  |5   5   5   5   6    5    6    5    5    6    5  &gt;of
 3  |1   2   1   3   1    3    1    1    2         1 / stalls
Avg 1.7 1.9 1.7 2.1 1.8  2.1  1.8  1.7  1.9  1.6  1.7
</pre><small>

So, the best average path length is from stall #9, 1.6000.

<h3>OUTPUT FORMAT</h3>
<p> A single line with the smallest, most-central stall number, a
space, and the average length (four decimal places).

<h3>SAMPLE OUTPUT (FILE amazing.out)</h3>
<pre>
9 1.6000
</pre>
