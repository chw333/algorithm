<html>
<head> <title>Analysis 39: Cowcycle</title> </head>
<body background="../../usaco/bg3.jpg">
<img src="../../usaco/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Cowcycle</font></b><br>
Rob Kolstad
</center>
<html>

<p>  This problem is only tricky for generating the proper gears
to check ratios and coding so that it doesn't run too long.  Tomek
Czajka's program (below) does all these things well.  Note how
he generates the gear ratios in an order to reduce sorting time.
His recursive gear generation is very elegant with very few extra
steps.



<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

const double epsilon = 1e-13;

int F,R,F1,F2,R1,R2;
int GearF[20];
int GearR[20];
double bestvar;
int BestGearF[20];
int BestGearR[20];

void Try() {
    static int f,r,N,a,b;
    static double S[100];
    static double m,var;
    if(GearF[F-1]*GearR[R-1]&lt;3*GearF[0]*GearR[0]) return;
				/* note use of integers */
    N=0;
    for(f=F-1; f&gt;=0; f--)
        for(r=0; r&lt;R; r++)
            S[N++]=double(GearF[f])/GearR[r];
    /* sort */
    for(a=1; a&lt;N; a++) {
        b=a;
        while(b&gt;0 &amp;&amp; S[b-1]&lt;S[b]) {
            m=S[b-1]; S[b-1]=S[b]; S[b]=m;
            b--;
        }
    }
    /* build difference table */
    N--;
    for(a=0; a&lt;N; a++) S[a]-=S[a+1];

    /* calculate mean */
    m=0.0;
    for(a=0; a&lt;N; a++) m+=S[a];
    m/=N;

    /* calculate variance */
    var=0.0;
    for(a=0; a&lt;N; a++) var+=S[a]*S[a];
    var=var/N-m*m;
    if(var&lt;bestvar) {
        bestvar=var-epsilon;
        for(a=0; a&lt;F; a++) BestGearF[a]=GearF[a];
        for(a=0; a&lt;R; a++) BestGearR[a]=GearR[a];
    }
}

void rekR(int nr,int least) {
    int i;
    if(nr==R) Try();
    else {
        for(i=least; i&lt;=R2; i++) {
            GearR[nr]=i;
            rekR(nr+1,i+1);
        }
    }
}

void rekF(int nr,int least) {
    int i;
    if(nr==F) rekR(0,R1);
    else {
        for(i=least; i&lt;=F2; i++) {
            GearF[nr]=i;
            rekF(nr+1,i+1);
        }
    }
}

void Read() {
    FILE *f=fopen("cowcycle.in","r");
    fscanf(f,"%d%d%d%d%d%d",&amp;F,&amp;R,&amp;F1,&amp;F2,&amp;R1,&amp;R2);
    fclose(f);
}

void Write() {
    int i;
    FILE *f=fopen("cowcycle.out","w");
    for(i=0; i&lt;F; i++) {
        fprintf(f,"%d",BestGearF[i]);
        if(i&lt;F-1) fputc(' ',f);  else fputc('\n',f);
    }
    for(i=0; i&lt;R; i++) {
        fprintf(f,"%d",BestGearR[i]);
        if(i&lt;R-1) fputc(' ',f);  else fputc('\n',f);
    }
    fclose(f);
}

int main() {
    Read();  // F,R,F1,F2,R1,R2
    bestvar=1e100;
    rekF(0,F1);
    Write();
    return 0;
}
</pre>
<center>
<a href="../BACK/default.htm">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body>
