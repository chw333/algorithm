<html>
<head> <title>Analysis 54: Sorting A Three-Valued Sequence</title> </head>
<body background="../../usaco/bg3.jpg">
<img src="../../usaco/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Sorting A Three-Valued Sequence</font></b><br>
Russ Cox
</center>
<html>

<p>We read the input into an array, and sort a copy of it in another array, so
we know what we have and what we want.

<p>A swap touches two elements, so it can correct at most two misplaced
elements.  We run through the array looking for pairs of misplaced
elements that a swap would correct, and do those swaps.

<p>The remaining misplaced elements form little cycles: a 1 where a 2
should be, a 2 where a 3 should be, and that 3 where the 1 should be.
It takes two swaps to correct such a cycle.  So we count the number of
such cycles (by counting misplaced elements and dividing by three) and
then add in two times that many swaps.

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXN 	1000

int n;
int have[MAXN];
int want[MAXN];

int
intcmp(const void *a, const void *b)
{
    return *(int*)a - *(int*)b;
}

void
main(void)
{
    int i, j, k, n, nn[4], nswap, nbad;
    FILE *fin, *fout;

    fin = fopen("sort3.in", "r");
    fout = fopen("sort3.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%d", &amp;n);

    for(i=0; i&lt;n; i++) {
	fscanf(fin, "%d", &amp;have[i]);
	want[i] = have[i];
    }
    qsort(want, n, sizeof(want[0]), intcmp);

    /* swaps that correct two elements */
    nswap = 0;
    for(i=0; i&lt;n; i++)
    for(j=0; j&lt;n; j++) {
	if(have[i] != want[i] &amp;&amp; have[j] != want[j]
	        &amp;&amp; have[i] == want[j] &amp;&amp; have[j] == want[i]) {
	    have[i] = want[i];
	    have[j] = want[j];
	    nswap++;
	}
    }

    /* remainder are pairs of swaps that correct three elements */
    nbad = 0;
    for(i=0; i&lt;n; i++)
	if(have[i] != want[i])
	    nbad++;

    assert(nbad%3 == 0);
    nswap += nbad/3 * 2;

    fprintf(fout, "%d\n", nswap);
    exit(0);
}
</pre>

<p> Dan Jasper from Germany writes:

<p>The previous solution needs a copy of the original list and
O(N<sup>2</sup>) time.  I think it was necessary with the original task,
where you had to print out the exchange operations, but to just count
them, there is a more efficient solution.  You can count the "1", "2"
and "3", so you can calculate in what parts (buckets) of the list they
have to be. The rest of the solution is somehow equal to yours, but all
in all it uses O(N) time and does not need a copy of the list.

<pre>
#include &lt;stdio.h&gt;

int list[1000], N, res, count[3], start[3];
in[3][3]; // this counts the number of "1"s in bucket "2", ...

void readFile() {
    FILE *f; int i;
    f = fopen("sort3.in", "r");
    fscanf(f, "%d", &amp;N);
    for(i = 0; i &lt; N; i++) {
        fscanf(f, "%d", &amp;list[i]);
    }
    fclose(f);
}

void writeFile() {
    FILE *f;
    f = fopen("sort3.out", "w");
    fprintf(f, "%d\n", res);
    fclose(f);
}

void findBuckets() {
    int i;
    for(i = 0; i &lt; N; i++) count[list[i]-1]++;
    start[0] = 0;
    start[1] = count[0];
    start[2] = count[0] + count[1];
}

void findWhere() {
    int i, j;
    for(i = 0; i &lt; 3; i++) {
        for(j = 0; j &lt; count[i]; j++) in[list[start[i] + j]-1][i]++;
    }
   }

void sort() {
    int h;
    // 1 &lt;-&gt; 2
    h = in[0][1];
    if(in[1][0] &lt; h) h = in[1][0];
    res += h; in[0][1] -= h; in[1][0] -= h;
    // 3 &lt;-&gt; 2
    h = in[2][1];
    if(in[1][2] &lt; h) h = in[1][2];
    res += h; in[2][1] -= h; in[1][2] -= h;
    // 1 &lt;-&gt; 3
    h = in[0][2];
    if(in[2][0] &lt; h) h = in[2][0];
    res += h; in[0][2] -= h; in[2][0] -= h;

    // Cycles
    res += (in[0][1] + in[0][2]) * 2;
}

void process() {
    findBuckets();
    findWhere();
    sort();
}

int main () {
    readFile();
    process();
    writeFile();
    return 0;
}
</pre>

<center>
<a href="../BACK/default.htm">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body>

