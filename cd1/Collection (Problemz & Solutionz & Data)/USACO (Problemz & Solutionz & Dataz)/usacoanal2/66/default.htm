<html>
<head> <title>Problem 66: All Latin Squares</title> </head>
<body background="../../usaco/bg3.jpg">
<img src="../../usaco/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">All Latin Squares</font></b><br>
<b>Songzi Du</b>
</center>

<p>Leonhard Euler introduced latin squares in 1783 as a "nouveau espece de
carres magiques", a new kind of magic squares.  Combinatorists calculated
the numbers of latin squares (up to 7x7) on paper for, apparently, mental
challenges, before the invention of computer.

<p>In this problem, we must count the number of Latin square whose first row
is {1, 2, 3 ... N}.  One approach is a recursive brute-force search: place
every appropriate number in a position and "re-curse" on the next position;
when a complete latin square is formed, increment our total number.  This
algorithm would work fine for N<=6 but would be too slow for N=7.
Therefore some prunings/optimizations are required:

<p>1. A latin square whose first row and column are both {1, 2, 3 ... N} is
called a reduced (or normalized) latin square.  It is useful because for
any latin square, permutating its rows and columns will produce many
different latin squares.  Let L(K) represent the number of KxK reduced
latin square and N(K) represent the total number of KxK latin square, it
is obvious that
<center> N(K) = L(K) * N! * (N-1)!</center>
since for any reduced latin square, you can permute its rows (N!) and
columns ((N-1)!) and get N!*(N-1)! different latin squares.  Likewise, M(K)
= L(K) * (N-1)!  where M(K) is the number of KxK latin square of our
interest.  Therefore, we only need to search and count the reduced latin
square.

<p>2. For the second row (the first row is {1, 2, 3 ... N}): the number of
latin square (reduced or not reduced) whose row 2 column 2 is 3 is same
with number of latin square whose row 2 column 2 is 4, 5, or ... N.  We
can take advantage of this fact; the idea is better illustrated in the code
below.

<p>3. When we filled the kth row of a latin square (k&lt;N), we know for a
fact that the (k+1)th row could be filled.  Therefore, we only need to
search until N-1 row.

<p>Here is the code in C++:

<pre>
#include &lt;fstream.h&gt;

int     N;
bool    row_used[7][7];
bool    col_used[7][7];
int     factorial[7];

int 
searchR (int r, int c)
{
    if (c == N) {
	return searchR (r + 1, 1);
    }
    if (r == N - 1) {
	return 1;
    }

    int     i, t = 0, sum = 0;
    int     s[2] = {-1, -1};

    for (i = 0; i &lt; N; i++) {
	if (row_used[r][i] || col_used[c][i])
	    continue;
	if (i &gt; c)
	    t = 1;
	if (r == 1 &amp;&amp; s[t] != -1) {
	    sum += s[t];
	}
	else {
	    row_used[r][i] = true;
	    col_used[c][i] = true;
	    s[t] = searchR (r, c + 1);
	    sum += s[t];
	    row_used[r][i] = false;
	    col_used[c][i] = false;
	}
    }
    return sum;
}

void 
main ()
{
    double  nLatin;
    int     i;

    ifstream fin ("latin.in");
    fin &gt;&gt; N;
    fin.close ();

    factorial[0] = 1;
    for (i = 0; i &lt; N; i++) {
	col_used[i][i] = true;
	row_used[i][i] = true;
	if (i &gt; 0)
	    factorial[i] = i * factorial[i - 1];
    }

    nLatin = (double) factorial[N - 1] * (double) searchR (1, 1);

    ofstream fout ("latin.out");
    fout.precision (0);
    fout.setf (ios: :fixed);
    fout &lt;&lt; nLatin &lt;&lt; '\n';
    fout.close ();
}
</pre>
<br><br>
<center>
<a href="mailto:grader@ace.delos.com">Submit Solution via Email</a>
&nbsp;|&nbsp; <a href="../BACK/default.htm"> USACO Gateway </a>  &nbsp;| &nbsp;
<a href="mailto:kolstad@ace.delos.com">Comment or Question </a>
</center>
</body>
</html>
