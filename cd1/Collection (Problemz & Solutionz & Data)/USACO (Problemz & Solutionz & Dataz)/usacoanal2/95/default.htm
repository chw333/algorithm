<html>
<head> <title>Analysis 95: Prime Palindromes</title> </head>
<body background="../../usaco/bg3.jpg">
<img src="../../usaco/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Prime Palindromes</font></b><br>
Russ Cox
</center>
<html>

<p>The main problem here is that we need some way to generate palindromes.
Since there are only about 10,000 palindromes less than 100,000,000, we
can just test each one to see if it is prime and in the range.

<p>To generate a palindrome, we start with the first half and reverse
it.  The trick is that we can repeat the middle character or not repeat
the middle character.  I call a palindrome with a repeated middle
character "even" (because it is of even length) and one without "odd".
So from the string "123", we can generate the even palindrome "123321"
or the odd palindrome "12321".

<p>We can generate all palindromes by doing the following:

<ul>
<li>length 1: generate odd palindromes using 1..9 </li>
<li>length 2: generate even palindromes using 1..9 </li>
<li>length 3: generate odd palindromes using 10..99 </li>
<li>length 4: generate even palindromes using 10..99 </li>
<li>... </li>
</ul>

<p>The "generate" function does exactly this, using "genoddeven" to
first generate the odd palindromes for a range and then the even ones.

<p>The "gen" function generates an even or odd palindrome for a number
by converting it to a string, making a palindrome, and converting the
resulting string back to a number.  Then it tests to see if the number
is in the range and prime.  If so, it is printed.

<p>We could speed this up in a number of ways: use a faster primality
test, don't generate palindromes past "b", etc.  But this is already
plenty fast, and doing such things makes the program more complex and
might introduce bugs.

<pre>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include &lt;stdlib.h&gt;

FILE *fout;
long a, b;

int
isprime(long n)
{
    long i;

    if(n == 2)
	return 1;

    if(n%2 == 0)
	return 0;

    for(i=3; i*i &lt;= n; i+=2)
	if(n%i == 0)
	    return 0;

    return 1;
}

void
gen(int i, int isodd)
{
    char buf[30];
    char *p, *q;
    long n;

    sprintf(buf, "%d", i);

    p = buf+strlen(buf);
    q = p - isodd;

    while(q &gt; buf)
	*p++ = *--q;
    *p = '\0';

    n = atol(buf);
    if(a &lt;= n &amp;&amp; n &lt;= b &amp;&amp; isprime(n))
	fprintf(fout, "%ld\n", n);
}

void
genoddeven(int lo, int hi)
{
    int i;

    for(i=lo; i&lt;=hi; i++)
        gen(i, 1);

    for(i=lo; i&lt;=hi; i++)
        gen(i, 0);
}

void
generate(void)
{
    genoddeven(1, 9);
    genoddeven(10, 99);
    genoddeven(100, 999);
    genoddeven(1000, 9999);
}

void
main(void)
{
    FILE *fin;

    fin = fopen("pprime.in", "r");
    fout = fopen("pprime.out", "w");
    assert(fin != NULL && fout != NULL);

    fscanf(fin, "%ld %ld", &a, &b);

    generate();
    exit (0);
}
</pre>

<b>master_zed writes:</b>

<p>The problem can be simplified slightly by noticing that any even
palindrome is divisible by 11. Therefore, 11 is the ONLY even prime
palindrome. This eliminates the need to deal with 2 cases:

<pre>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include &lt;stdlib.h&gt;

FILE *fout;
long a, b;

int
isprime(long n)
{
    long i;

    if(n == 2)
        return 1;

    if(n%2 == 0)
        return 0;

    for(i=3; i*i &lt;= n; i+=2)
        if(n%i == 0)
                return 0;

    return 1;
}

void
gen(int i)
{
    char buf[30];
    char *p, *q;
    long n;

    sprintf(buf, "%d", i);

    p = buf+strlen(buf);
    q = p - 1;

    while(q &gt; buf)
            *p++ = *--q;
    *p = '\0';

    n = atol(buf);
    if(a &lt;= n &amp;&amp; n &lt;= b &amp;&amp; isprime(n))
        fprintf(fout, "%ld\n", n);
}

void
generate(void)
{
    int i;
    for (i = 1; i &lt;= 9; i++)
      gen(i);

    if(a &lt;= 11 &amp;&amp; 11 &lt;= b)
      fprintf(fout, "11\n");

    for (i = 10; i &lt;= 9999; i++)
      gen(i);
}

void
main(void)
{
    FILE *fin;

    fin = fopen("pprime.in", "r");
    fout = fopen("pprime.out", "w");
    assert(fin != NULL &amp;&amp; fout != NULL);

    fscanf(fin, "%ld %ld", &amp;a, &amp;b);

    generate();
    exit (0);
}
</pre>

<b>Coach Rob writes:</b>
<p> I guess I have a slightly different coding style than the previous
two solutions.  This is the same idea but coded a bit more tightly
(thanks to Michael Coblenz for its kernel):
<pre>
#include &lt;iostream.h&gt;
#include &lt;fstream.h&gt;
#include &lt;stdlib.h&gt;

int primelist[100000];
int nprimes;

int isPrime(int num);
int reverse2(int i, int j);

int compare(const void *p, const void *q) { return *(int *)p-*(int *)q; }

void main (void) {
    ifstream infile("pprime.in");
    ofstream outfile("pprime.out"); 
    int i, j, begin, end, num;
    infile&gt;&gt;begin&gt;&gt;end;
    if (begin &lt;= 11 &amp;&amp; 11 &lt;=end)
        primelist[nprimes++] = 11;
    for (j = 0; j &lt;= 999; j++)
        for (i = 0; i &lt;= 9; i++)  {
	    num = reverse2(j,i);
	    if (num &gt;= begin &amp;&amp; num &lt;=end &amp;&amp; isPrime(num)) 
  	        primelist[nprimes++] = num;
        }
    qsort(primelist, nprimes, sizeof(int), compare);
    for (i = 0; i &lt; nprimes; i++)
	outfile &lt;&lt; primelist[i] &lt;&lt; "\n";
}

int
reverse2(int num, int middle) {
    int i, save=num, digit, combino = 1;
    for (i = 0; num; num /= 10) {
	digit = num % 10;
	i = 10 * i + digit;
	combino *= 10;
    }
    return i+10*combino*save+combino*middle;
}
	
int isPrime(int num) {
    int i;
    if (num &lt;= 3) return 1;
    if (num%2 == 0 || num%3 ==0) return 0;
    for (i = 5; i*i &lt;= num; i++)
	if (num %i ==0)
	    return 0;
    return 1;
}
</pre>

<center>
<a href="../BACK/default.htm">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body>
