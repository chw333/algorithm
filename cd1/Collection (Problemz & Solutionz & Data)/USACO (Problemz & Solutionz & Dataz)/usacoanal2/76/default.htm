<html>
<head> <title>Analysis 4: Mixing Milk</title> </head>
<body background="../../usaco/bg3.jpg">
<img src="../../usaco/cow1.jpg" width="742" height="118">
<center>
<b><font size="7">Mixing Milk</font></b><br>
Russ Cox
</center>
<html>

<p>Since we're acquiring things that are all of the same size (in this
case, units of milk), a greedy solution will suffice: we sort the farmers
by price, and then buy milk from the farmers with the lowest prices,
always completely exhausting one farmer's supply before moving on to
the next one.

<p>To do this, we read the input into Farmer structures, sort the array
by price, and then walk the array, buying milk until we've got all
the milk we want.

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define MAXFARMER 5000

typedef struct Farmer Farmer;
struct Farmer {
	int p;	/* price per gallon */
	int a;	/* amount to sell */
};

int
farmcmp(const void *va, const void *vb)
{
	return ((Farmer*)va)-&gt;p - ((Farmer*)vb)-&gt;p;
}

int nfarmer;
Farmer farmer[MAXFARMER];

void
main(void)
{
	FILE *fin, *fout;
	int i, n, a, p;

	fin = fopen("milk.in", "r");
	fout = fopen("milk.out", "w");

	assert(fin != NULL &amp;&amp; fout != NULL);

	fscanf(fin, "%d %d", &amp;n, &amp;nfarmer);
	for(i=0; i&lt;nfarmer; i++)
		fscanf(fin, "%d %d", &amp;farmer[i].p, &amp;farmer[i].a);

	qsort(farmer, nfarmer, sizeof(farmer[0]), farmcmp);

	p = 0;
	for(i=0; i&lt;nfarmer &amp;&amp; n &gt; 0; i++) {
		/* take as much as possible from farmer[i], up to amount n */
		a = farmer[i].a;
		if(a &gt; n)
			a = n;
		p += a*farmer[i].p;
		n -= a;
	}

	fprintf(fout, "%d\n", p);
	exit(0);
}
</pre>

<br>
<bold>Ran Pang of Canada writes:</bold>

<p>This source code the problem in linear time (with respect to the
maximum price, and number of farmers, since we have to read in the data
anyway), while I think the qsort used by the solution would consume O(n
log n), where n is the number of farmers.

<pre>
#include&lt;stdio.h&gt;

#define MAXPRICE 1001

int amount_for_price[MAXPRICE]={0};
int N, M;

int Cal(void);
int Read(void);

int main(void) {
    Read();
    Cal();
    return 0;
}

int Cal(void) {
    int i;
    int price_total=0;
    int milk_total=0;
    for(i=0;i&lt;MAXPRICE;i++) {
        if(amount_for_price[i]) {
            if(milk_total+amount_for_price[i]&lt;N) {
                price_total+=(i*amount_for_price[i]);
                milk_total+=amount_for_price[i];
            }
            else {
                int amount_needed = N-milk_total;
                price_total+=(i*amount_needed);
                break;
            }
        }
    }
    {
        FILE* out=fopen("milk.out","w");
        fprintf(out,"%d\n",price_total);
        fclose(out);
    }
    return 0;
}

int Read(void) {
    FILE* in = fopen("milk.in","r");
    int i, price, amount;
    fscanf(in,"%d %d",&amp;N,&amp;M);
    for(i=0;i&lt;M;i++) {
        fscanf(in, "%d %d", &amp;(price), &amp;(amount));
        amount_for_price[price]+=amount;
    }
    fclose(in);
    return 0;
}
</pre>


<center>
<a href="../BACK/default.htm">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>
</body>
