<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0072)http://www.uwp.edu/academic/mathematics/usaco/2002/February/problems.htm -->
<HTML><HEAD><TITLE>Problems</TITLE>
<META http-equiv=Content-Type content="text/html; charset=ks_c_5601-1987">
<META content="MSHTML 5.50.4134.100" name=GENERATOR></HEAD>
<BODY>
<TABLE width="99%" border=0>
  <TBODY>
  <TR>
    <TD width="5%">&nbsp;</TD>
    <TD width="95%" colSpan=2><STRONG><FONT style="FONT-SIZE: larger" 
      face=Arial>Problems</FONT></STRONG>
      <HR>
    </TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="85%"><HTTP: train.usaco.org><HTTP: usacogate 
      ace.delos.com><WWW.DELOS.COM><O:P><PRE> 
<B>USA Computing Olympiad
Senior (Green) Division</B>


PROBLEM 1: Fiber Communications [Reid Barton, 2001]

Farmer John wants to connect his N (1 &lt;= N &lt;= 1,000) barns (numbered 1..N) 
with a new fiber-optic network.  However, the barns are located in a circle 
around the edge of a large pond, so he can only connect pairs of adjacent barns. 
The circular configuration means that barn N is adjacent to barn 1.

FJ doesn't need to connect all the barns, though, since only certain pairs of 
cows wish to communicate with each other.  He wants to construct as few 
connections as possible while still enabling all of these pairs to communicate 
through the network.  Given the list of barns that wish to communicate with 
each other, determine the minimum number of lines that must be laid.  To 
communicate from barn 1 to barn 3, lines must be laid from barn 1 to barn 2 
and also from barn 2 to barn 3.

PROBLEM NAME: fiber

INPUT FORMAT:

* Line 1: Two integers, N and P (the number of communication pairs, 1 &lt;= P
  &lt;= 10,000)

* Lines 2..P+1: two integers describing a pair of barns between which
  communication is desired.  No pair is duplicated in the list.

SAMPLE INPUT (file fiber.in):

5 2
1 3
4 5

OUTPUT FORMAT:

One line with a single integer which is the minimum number of direct connections 
FJ needs to make.

SAMPLE OUTPUT (file fiber.out):

3

[Which connect barn pairs 1-2, 2-3, and 4-5.]

----------------------------------------------------------------------

PROBLEM 2: Power Hungry Cows [Burch, 2002]

FJ's cows would like to be able to compute integer powers P (1 &lt;= P &lt;=
20,000) of numbers very quickly, but need your help.  Because they're going to be 
computing powers of very large numbers, they can only keep around two work variables 
for intermediate results.

The first of those work variables is initialized to the number (denoted x) for which 
they are calculating the power; the other is initialized to 1. The cows can both 
multiply and divide any pair of the work variables and store the result in any work 
variable, but all results are stored as integers.

For example, if they want to compute x^31, one way to perform the calculation is:

                                              WV1  WV2
                                      Start:   x    1
   Multiply first by first, store in second:   x   x^2
                  Multiply second by second:   x   x^4
                  Multiply second by second:   x   x^8
                  Multiply second by second:   x   x^16
                  Multiply second by second:   x   x^32
                     Divide second by first:   x   x^31

Thus, x^31 can computed in six operations.  Given the power to be computed and the 
the number of work variables, find the minimum number of operations to calculate the power.

PROBLEM NAME: power

INPUT FORMAT:

A single line with one integer: P.

SAMPLE INPUT (file power.in):

31

OUTPUT FORMAT:

A single line with a single integer that is the minimum number of operations it 
requires to compute the power.

SAMPLE OUTPUT (file power.out):

6

----------------------------------------------------------------------

PROBLEM 3: Cow Cycling [Dan Adkins]

The cow bicycling team consists of N (1 &lt;= N &lt;= 20) cyclists.  They wish to determine 
a race strategy which will get one of them across the finish line as fast as possible.

Like everyone else, cows race bicycles in packs because that's the most efficient 
way to beat the wind.  While travelling at x laps/minute (x is always an integer), 
the head of the pack expends x*x energy/minute while the rest of pack drafts behind 
him using only x energy/minute.  Switching leaders requires no time though can only 
happen after an integer number of minutes.  Of course, cows can drop out of the race 
at any time.

The cows have entered a race D (1 &lt;= D &lt;= 100) laps long.  Each cow has the same 
initial energy, E (1 &lt;= E &lt;= 100).

What is the fastest possible finishing time?  Only one cow has to cross the line.  
The finish time is an integer.  Overshooting the line during some minute is no 
different than barely reaching it at the beginning of the next minute (though the cow 
must have the energy left to cycle the entire minute).  N, D, and E are integers.

PROBLEM NAME: cycling

INPUT FORMAT:

A single line with three integers: N, E, and D

SAMPLE INPUT (file cycling.in):

3 30 20

OUPUT FORMAT:

A single line with the integer that is the fastest possible finishing time for the 
fastest possible cow.  Output 0 if the cows are not strong enough to finish the race.

SAMPLE OUTPUT (file cycling.out):

7

[as shown in this chart:
	                            leader E
	               pack  total used this
	time  leader  speed   dist   minute
	  1      1      5       5      25
	  2      1      2       7       4
	  3      2*     4      11      16
	  4      2      2      13       4
	  5      3*     3      16       9
	  6      3      2      18       4
	  7      3      2      20       4
	* = leader switch


----------------------------------------------------------------------

PROBLEM 4: Rebuilding Roads [Romanian Training Camp, 2001]

The cows have reconstructed Farmer John's farm, with its N barns (1 &lt;= N &lt;= 150, 
number 1..N) after the terrible earthquake last May. The cows didn't have time to 
rebuild any extra roads, so now there is exactly one way to get from any given barn 
to any other barn.  Thus, the farm transportation system can be represented as a tree.

Farmer John wants to know how much damage another earthquake could do.  He wants to 
know the minimum number of roads whose destruction would isolate a subtree of exactly 
P (1 &lt;= P &lt;= N) barns from the rest of the barns.

PROBLEM NAME: roads

INPUT FORMAT:

* Line 1: Two integers, N and P

* Lines 2..N: N-1 lines, each with two integers I and J.  Node I is
          node J's parent in the tree of roads.

SAMPLE INPUT (file roads.in):

11 6
1 2
1 3
1 4
1 5
2 6
2 7
2 8
4 9
4 10
4 11

OUTPUT FORMAT:

A single line containing the integer that is the minimum number of roads that need 
to be destroyed for a subtree of P nodes to be isolated.

SAMPLE OUTPUT (file roads.out):

2

[A subtree with nodes (1, 2, 3, 6, 7, 8) will become isolated if roads 1-4 and 
1-5 are destroyed.]

----------------------------------------------------------------------

PROBLEM 5: Triangular Pastures [Dean, 2001]

Like everyone, cows enjoy variety.  Their current fancy is new shapes for pastures.  
The old rectangular shapes are out of favor; new geometries are the favorite.

I. M. Hei, the lead cow pasture architect, is in charge of creating a triangular 
pasture surrounded by nice white fence rails.  She is supplied with N (3 &lt;= N &lt;= 40) 
fence segments (each of integer length Li (1 &lt;= Li &lt;= 40) and must arrange them into 
a triangular pasture with the largest grazing area.  Ms. Hei must use all the rails 
to create three sides of non-zero length.

Help Ms. Hei convince the rest of the herd that plenty of grazing land will be available.  
Calculate the largest area that may be enclosed with a supplied set of fence segments.

PROBLEM NAME: pasture

INPUT FORMAT:

* Line 1: A single integer N

* Lines 2..N+1: N lines, each with a single integer representing one
          fence segment's length.  The lengths are not necessarily unique.

SAMPLE INPUT (file pasture.in):

5
1
1
3
3
4

OUTPUT FORMAT:

A single line with the integer that is the truncated integer representation of the 
largest possible enclosed area multiplied by 100.  Output -1 if no triangle of positive 
area may be constructed.

SAMPLE OUTPUT (file pasture.out):

692

[which is 100x the area of an equilateral triangle with side length 4]



                         END OF  Green CONTEST TEXT
</PRE>
      <HR>
<PRE>                           <B>USA Computing Olympiad
                               Orange Division</B>

***************************************************************************

                      Four Problems Numbered 6 through 9

***********************************************************************

PROBLEM 6: Chores [Don Piele, 2001]

Farmer John's family pitches in with the chores during milking, doing all 
the chores as quickly as possible. At FJ's house, some chores cannot be 
started until others have been completed, e.g., it is impossible to wash 
the cows until they are in the stalls.

Farmer John has a list of N (3 &lt;= N &lt;= 10,000) chores that must be completed. 
Each chore requires an integer time (1 &lt;= length of time &lt;= 100) to complete 
and there may be other chores that must be completed before this chore is started.  
We will call these prerequisite chores. At least one chore has no prerequisite: 
the very first one, number 1. Farmer John's list of chores is nicely ordered, and 
chore K (K &gt; 1) can have only chores 1,.K-1 as prerequisites. Write a program that 
reads a list of chores from 1 to N with associated times and all perquisite chores. 
Now calculate the shortest time it will take to complete all N chores. Of course, 
chores that do not depend on each other can be performed simultaneously.

PROBLEM NAME: chores
 
INPUT FORMAT:

* Line 1: One integer, N

* Lines 2..N+1: N lines, each with several space-separated integers. Line 2
          contains chore 1; line 3 contains chore 2, and so on.  Each line
          contains the length of time to complete the chore, the number of
          the prerequisites, Pi,  (0 &lt;= Pi &lt;= 100), and the Pi prerequisites
          (range 1..N, of course).
 
SAMPLE INPUT (file chores.in):

7
5 0
1 1 1
3 1 2
6 1 1
1 2 2 4
8 2 2 4
4 3 3 5 6
 
OUTPUT FORMAT:

A single line with an integer which is the least amount of time required to perform 
all the chores.
 
SAMPLE OUTPUT:

23

[Here is one task schedule:
        Chore 1 starts at time 0, ends at time 5.
        Chore 2 starts at time 5, ends at time 6.
        Chore 3 starts at time 6, ends at time 9.
        Chore 4 starts at time 5, ends at time 11.
        Chore 5 starts at time 11, ends at time 12.
        Chore 6 starts at time 11, ends at time 19.
        Chore 7 starts at time 19, ends at time 23.
]
 
----------------------------------------------------------------------

PROBLEM 7: Dessert [Traditional, 2001]

FJ has a new rule about the cows lining up for dinner.  Not only must the N (3 &lt;= N &lt;= 15) 
cows line up for dinner in order, but they must place a napkin between each pair of cows 
with a "+", "-", or "." on it.  In order to earn their dessert, the cow numbers and the 
napkins must form a numerical expression that evaluates to 0.  The napkin with a "." 
enables the cows to build bigger numbers.  Consider this equation for seven cows:

      1 - 2 . 3 - 4 . 5 + 6 . 7

This means 1-23-45+67, which evaluates to 0.  You job is to assist the cows in getting dessert.  
(Note: "... 10 . 11 ...") will use the number 1011 in its calculation.)

PROBLEM NAME: dessert
 
INPUT FORMAT:

One line with a single integer, N
 
SAMPLE INPUT (file dessert.in):

7
 
OUTPUT FORMAT:

One line of output for each of the first 20 possible expressions -- then a line with a single 
integer that is the total number of possible answers. Each expression line has the general 
format of number, space, napkin, space, number, space, napkin, etc. etc.  The output order 
is lexicographic, with "+" coming before "-" coming before ".".  If fewer than 20 expressions 
can be formed, print all of the expressions.
 
SAMPLE OUTPUT (file dessert.out):

1 + 2 - 3 + 4 - 5 - 6 + 7
1 + 2 - 3 - 4 + 5 + 6 - 7
1 - 2 + 3 + 4 - 5 + 6 - 7
1 - 2 - 3 - 4 - 5 + 6 + 7
1 - 2 . 3 + 4 + 5 + 6 + 7
1 - 2 . 3 - 4 . 5 + 6 . 7
6

----------------------------------------------------------------------
 
PROBLEM 8: Extra Krunch [Piele/Kolstad, 1984/2002]

A krunched word has no vowels ("A", "E", "I", "O", and "U") and no repeated letters.  Removing 
vowels and letters that appear twice or more from MISSISSIPPI yields MSP.  In a krunched word, 
a letter appears only once, the first time it would appear in the unkrunched word.  Vowels never 
appear.

Krunched phrases similarly have no vowels and no repeated letters. Consider this phrase:

        RAILROAD CROSSING

and its krunched version:

        RLD CSNG

Blanks are krunched differently. Blanks are removed so that a krunched phrase has no blanks on 
its beginning or end, never has two blanks in a row, and has no blanks before punctuation.  
Otherwise, blanks not removed. If we represent blanks by "_",

        MADAM_I_SAY_I_AM_ADAM__

krunches to:

        MD_SY

where the single remaining blank is shown by "_".

Write a program that reads a line of input (whose length ranges from 2 to 70 characters), 
and krunches it.  Put the krunched word or phrase in the output file.  The input line has 
only capital letters, blanks, and the standard punctuation marks: period, comma, and 
question mark.

PROBLEM NAME: krunch

INPUT FORMAT:

A single line to be krunched.

SAMPLE INPUT (file krunch.in):

NOW IS THE TIME FOR ALL GOOD MEN TO COME TO THE AID OF THEIR COUNTRY.

OUTPUT FORMAT:

A single krunched line that follows the rules above.

SAMPLE OUTPUT (file krunch.out):

NW S TH M FR L GD C Y.

----------------------------------------------------------------------

PROBLEM 9: BUY LOW, BUY LOWER [Piele, 1990?]

The advice to "buy low" is half the formula to success in the bovine stock market.  
To be considered a great investor you must also follow this problems' advice:

                    "Buy low; buy lower"

Each time you buy a stock, you must purchase it at a lower price than the previous 
time you bought it. The more times you buy at a lower price than before, the better! 
Your goal is to see how many times you can continue purchasing at ever lower prices.

You will be given the daily selling prices of a stock (positive 16-bit
integers) over a period of time.  You can choose to buy stock on any of the days. 
Each time you choose to buy, the price must be strictly lower than the previous time 
you bought stock.  Write a program which identifies which days you should buy stock 
in order to maximize the number of times you buy.

Here is a list of stock prices:

 Day   1  2  3  4  5  6  7  8  9 10 11 12
Price 68 69 54 64 68 64 70 67 78 62 98 87

The best investor (by this problem, anyway) can buy at most four times if each purchase 
is lower then the previous purchase. One four day sequence (there might be others) of 
acceptable buys is:

Day    2  5  6 10
Price 69 68 64 62

PROBLEM NAME: buylow

INPUT FORMAT:

* Line 1: N (1 &lt;= N &lt;= 5000), the number of days for which stock prices
          are given

* Lines 2..etc: A series of N space-separated integers, ten per line except
          the final line which might have fewer integers.

SAMPLE INPUT (file buylow.in):

12
68 69 54 64 68 64 70 67 78 62
98 87

OUTPUT FORMAT:

Two integers on a single line:
   * The length of the longest sequence of decreasing prices
   * The number of sequences that have this length (guaranteed to fit in 31 bits)

In counting the number of solutions, two potential solutions are considered the same 
(and would only count as one solution) if they repeat the same string of decreasing 
prices, that is, if they "look the same" when the successive prices are compared. 
Thus, two different sequence of "buy" days could produce the same string of decreasing 
prices and be counted as only a single solution.

SAMPLE OUTPUT (file buylow.out):

4 2


                         END OF Orange CONTEST TEXT
</PRE>
      <HR>
<PRE></PRE><PRE></PRE></FONT></O:P><HTTP: train.usaco.org><HTTP: 
      train.usaco.org><WWW.DELOS.COM><HTTP: usacogate ace.delos.com><HTTP: 
      train.usaco.org>
      <P></P>
      <P class=MsoPlainText><FONT face=Courier size=2><SPAN 
      style="mso-spacerun: yes"></SPAN></FONT>&nbsp;</P></TD>
    <TD width="10%"></TD></TR></TBODY></TABLE></BODY></HTML>
