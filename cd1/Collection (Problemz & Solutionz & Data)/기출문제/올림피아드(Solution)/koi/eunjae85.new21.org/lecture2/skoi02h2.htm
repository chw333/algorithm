<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<title>KOI 19회 고등부 2. 헬기 착륙장</title>
<meta name="generator" content="Namo WebEditor v5.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

<table border="0" width="595">
    <tr>
        <td width="383" height="27" bgcolor="#CFD3FF"><p><font size="4"><b>&nbsp;&nbsp;KOI 
            19회 고등부 2. 헬기 착륙장</b></font></td>
        <td width="100" height="27" bgcolor="#CFD3FF"><p align="center"><a href="pkoi02h2.htm"><img src="button1.gif"
             border="0"></a></td>
        <td width="100" height="27" bgcolor="#CFD3FF"><p align="center"><a href="ckoi02h2.htm"><img src="button3.gif"
             border="0"></a></td>
    </tr>
</table>
<ul>
    <p>&nbsp; 
    <table border="0" style='line-height:170%'>
            <tr>
                <td width="550" height="210">
                <p><font size="2">&nbsp;&nbsp;그냥 가장 먼저 떠오르는 대로 코딩을 
                하자면, </font></p>
                <p><font size="2">&nbsp;&nbsp;for i : 1 -&gt; n<br> &nbsp;&nbsp;&nbsp;&nbsp;for 
                j : i + 1 -&gt; n<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;점i 
                와 점j를 지름의&nbsp;양끝으로 하는 원을 만들어서 체크</font></p>
                <p><font size="2">&nbsp;&nbsp;for i : 1 -&gt; n<br> &nbsp;&nbsp;&nbsp;&nbsp;for 
                j : i + 1 -&gt; n<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for 
                k : j + 1 -&gt; n<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;점i, 
                점j, 점k를 지나는 원을 만들어서 체크</font></p>
                <p><font size="2">&nbsp;이렇게 푼다면 O(n^4) 인데, n &lt;= 1000 
                이기 때문에 시간을 훨씬 초과해 버려서 저 방법을 개선해야 합니다. 
                아래 그림을 봅시다.</font></p>
                <p align="center"><font size="2"><img src="skoi02h2-1.jpg" width="500" height="500" border="0"></font></p>
                <p><font size="2">&nbsp;점이 많이 있습니다. 위의 방법대로 하다 
                보면, 저 빨간 세 점을 지나는 원을 만들고 체크를 하는 경우가 
                생길 것입니다. 저 빨간 세 점을 지나는 원으로 모든 점들을 포함할 
                수 있을까요? No!</font></p>
                <p><font size="2">&nbsp;왜 그럴까요? 저 무수히 많은 점들 중에 
                저 빨간 세 점은 안쪽에 있기 때문에 그렇습니다. 바깥 쪽에 있는 
                점들로 원을 만들어서 체크를 해본다면, 답이 될 수도 있겠죠. 하지만, 
                저렇게 안쪽에 있는 점들로 원을 아무리 만들어야 소용없는 거겠죠. 
                그러면 어떻게 바깥에 있는 점들로 원을 만드냐구요? 아시는 분들은 
                아시겠죠. 블록 껍질(Convex Hull)을 만드는 겁니다. 블록 껍질에 
                대한 설명은 여기서는 생략하도록 하겠습니다. 저 그림에서 블록 
                껍질을 만든다면,</font></p>
                <p align="center"><font size="2"><img src="skoi02h2-2.jpg" width="500" height="500" border="0"></font></p>
                <p><font size="2">&nbsp;블록 껍질(Convex Hull)을 구성하는 점은 
                10개입니다. 저 10개를 가지고, 두 점을 지름의 양끝으로 하는 원과 
                세 점을 지나는 원을 만들어서 체크해보면 되는 겁니다. 저런 식으로 
                풀 게 된다면, 평면상에 점들이 고르게 분포되어 있어야만 답을 
                빠른 시간안에 내뱉을 겁니다. 예를 들어서, 1000 각형의 꼭지점들이 
                입력데이터로 주어진다면? 그렇다면 블록 껍질을 구성하는 점이 
                1000 개가 됩니다. 그렇게 되면 제시간에 제대로 답을 출력할 수 
                없게 됩니다. 하지만 이번 KOI 에서는 저 방법으로 만점이 나왔기에 
                그런 데이터는 없었던 것 같습니다. 아마도 저 풀이를 요구하지 
                않았을까 하는 추측도 해봅니다만 다른 풀이가 또 있을지도 모르죠. 
                아무튼 원을 구성하는 점을 입력 데이터 전체에서 고르는 것이 아닌 
                블록 껍질을 구성하는 점에서부터 뽑아내면 시간을 아주 많이 단축시킬 
                수 있습니다. 직접 랜덤으로 점 1000 개를 만들어서 뿌려 놓고, 
                블록 껍질을 만들어보세요. 과연 몇 개의 점이 그 블록 껍질을 구성하고 
                있을지. 몇 개 안됩니다. 그렇기에 가능한 방법이겠죠.</font></p>
</td>
        </tr>
    </table>
    <p><font size="2">&nbsp;</font></p>
</ul>
</body>

</html>