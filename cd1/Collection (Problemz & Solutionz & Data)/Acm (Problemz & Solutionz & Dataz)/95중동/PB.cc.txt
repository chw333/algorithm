#include <iostream.h>

int upCount, downCount, pendingCount;
int numberOfUpSequences, numberOfDownSequences;

char state;

int thisValue, lastValue;

int main()
{
 float avgUp, avgDown;
 int done = 0;
 while ( ! done )
 {
  state = 'S';
  upCount = 0; downCount = 0; pendingCount = 0;
  numberOfUpSequences = 0; numberOfDownSequences = 0;
  while ( 1 )
  {
   cin >> thisValue;
   //scanf("%d", & thisValue);
   if ( (state == 'S') && (thisValue == 0 ) )
   {
    done = 1;
    break;
   }
   else if (thisValue == 0)
    break;
   switch ( state )
    {
     case 'S':
	 state = 'N';
      break;
     case 'N':
	if ( thisValue == lastValue )
	  pendingCount++;
	else if ( thisValue < lastValue )
	{
	 state = 'D';
	 downCount = pendingCount + 1;
	 numberOfDownSequences++;
	}
	else if ( thisValue > lastValue )
	{
	 state = 'U';
	 upCount = pendingCount + 1;
	 numberOfUpSequences++;
	}
     break;
    case 'D':
	if ( thisValue <= lastValue )
	 downCount++;
	else if ( thisValue > lastValue )
	{
	 state = 'U';
	 upCount++;
	 numberOfUpSequences++;
	}
     break;
    case 'U':
	if( thisValue >= lastValue )
	 upCount++;
	else if ( thisValue < lastValue )
	{
	 state = 'D';
	 downCount++;
	 numberOfDownSequences++;
	} 
     break;
    }
   lastValue = thisValue;
  }
  if ( state != 'S' )
  {
   if ( numberOfUpSequences )
     avgUp = (float)upCount/numberOfUpSequences;
   else
     avgUp = 0.0;
   if ( numberOfDownSequences )
     avgDown = (float)downCount/numberOfDownSequences;
   else
     avgDown = 0.0;
   cout << avgUp;
   cout << " " << avgDown << endl;
   //printf("%7.2f  %7.2f\n", avgUp, avgDown );
  }
 }
}

