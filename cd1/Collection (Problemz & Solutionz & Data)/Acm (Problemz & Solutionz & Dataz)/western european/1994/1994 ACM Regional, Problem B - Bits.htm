<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0048)http://www.karrels.org/Ed/ACM/weur94/prob_b.html -->
<HTML><HEAD><TITLE>1994 ACM Regional, Problem B - Bits</TITLE>
<META content="text/html; charset=ks_c_5601-1987" http-equiv=Content-Type><LINK 
href="mailto:Ed@Tool.com" rev=made>
<META content="MSHTML 5.00.3315.2870" name=GENERATOR></HEAD>
<BODY><EM>Not an official ACM page</EM> <BR>[<A 
href="http://www.karrels.org/Ed/ACM/weur94/prob_c.html">Problem C</A> | <A 
href="http://www.karrels.org/Ed/ACM/weur94/index.html">1994 Western European 
Regional problem set</A> | <A href="http://www.karrels.org/Ed/ACM/index.html">My 
ACM problem archive</A> | <A href="http://www.karrels.org/Ed/index.html">my home 
page</A>] 
<HR>

<CENTER>
<H4>1994-1995 ACM International Collegiate Programming Contest<BR>Western 
European Regional</H4>
<H1>Problem B </H1>
<H2>Bits </H2></CENTER>It is not always easy to transfer data from one computer 
system to the other. You need proper standards for data encoding, and may also 
need to compress data to save bandwidth and thus reduce costs. 
<P>To assist the designer in making implementation choices related to the 
available bandwidth, a tool is required that computes the size of each message 
in bits. The tool has to read and interpret the format of each message to do so. 

<P>A message can best be described by giving the underlying grammar, which uses 
the following terminals:
<P>
<BLOCKQUOTE>
  <DL>
    <DT><EM>id</EM> 
    <DD>a sequence of letters of length L (1&lt;=L&lt;=256) 
    <DT><EM>integer</EM> 
    <DD>a number between -10000 and 10000 (inclusive) 
    <DT>"word" 
    <DD>the literal string of characters word </DD></DL></BLOCKQUOTE>A message is 
defined by the following grammar: <PRE><BLOCKQUOTE><EM>message</EM>  ::= <EM>data</EM>
<EM>data</EM>     ::= <EM>id</EM> ":" <EM>type</EM>
<EM>type</EM>     ::= <EM>record</EM> | <EM>array</EM> | <EM>string</EM> | <EM>enum</EM> | <EM>range</EM>
<EM>record</EM>   ::= "{" <EM>data</EM>+ "}"
<EM>array</EM>    ::= "<STRONG>array</STRONG>" <EM>range</EM> "<STRONG>of</STRONG>" <EM>type</EM>
<EM>string</EM>   ::= "<STRONG>string</STRONG>" "(" <EM>integer</EM> ")"
<EM>enum</EM>     ::= "(" <EM>id-list</EM> ")"
<EM>id-list</EM>  ::= <EM>id</EM> | (<EM>id</EM> "," <EM>id-list</EM>)
<EM>range</EM>    ::= "[" <EM>integer</EM> ".." <EM>integer</EM> "]"
</BLOCKQUOTE></PRE>Note that the message grammar is specified according to the 
following notational conventions: 
<BLOCKQUOTE><PRE>x y      sequence: x followed by y
x | y    choice: x or y
x+       repetition: one or more occurrences of x
( )      used for grouping
</PRE></BLOCKQUOTE>Any two tokens may be separated by an arbitrary amount of 
white space (blanks, tabs an newlines). White space does not occur within 
tokens. 
<P>The (minimal) amount of bits needed to transmit a message can be computed 
using the following rules: 
<BLOCKQUOTE>record : sum of the sizes of the fields<BR>array : size of the 
  component type, multiplied by the number of elements in the range<BR>string : 
  the length, multiplied by 7 bits<BR>enum : smallest number of bits in which 
  all id's can be distinguished <BR>range : smallest number of bits in which all 
  range values can be distinguished<BR></BLOCKQUOTE>
<H3>Input</H3>The input contains on the first line the number of test cases (N). 
Each test case will contain message according to the grammar above. Messages may 
be separated by an arbitrary amount of white space. You may assume that the 
input is syntactically correct. For each range '<EM>L</EM>..<EM>H</EM>', it 
holds that <EM>L</EM>&lt;=<EM>H</EM>. A string consists of a positive number of 
characters. 
<H3>Output</H3>For each message, output the sentence: '<CODE>A "<EM>id</EM>" 
message requires <EM>S</EM> bits.</CODE>', where <EM>id</EM> is the identifier 
of the message and <EM>S</EM> its size in bits. <A 
href="http://www.karrels.org/Ed/ACM/weur94/prob_b.cc">
<H3>Sample Solution</H3></A>
<H3>Sample Input</H3><PRE>3
year : [1970..2030]
team : {
        name : string(14)
        members : array [1..3] of {
                sex : ( male, female )
                name : string(20)
                age : [16..30]
        }
        position : [1..40]
}
jurynames : array [1..3] of string(20)
</PRE>
<H3>Sample Output</H3><PRE>A "year" message requires 6 bits.
A "team" message requires 539 bits.
A "jurynames" message requires 420 bits.
</PRE>
<HR>
This page maintained by <A href="mailto:Ed@Tool.com">Ed Karrels</A>.<BR>Last 
updated September 20, 1999 </BODY></HTML>
