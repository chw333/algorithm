// Nogada mode...

#include <fstream.h>
#include <conio.h>
#include <string.h>
#include <ctype.h>

typedef struct _dat1
{
	char name;
	int size, t1, t2;
} dat1;

dat1 data[ 12 ] = { { 'A', 2, 3, 3 },
					{ 'B', 2, 2, 2 },
					{ 'C', 3, 5, 5 },
					{ 'D', 1, 1, 1 },
					{ 'E', 3, 4, 4 },
					{ 'F', 3, 3, 3 },
					{ 'G', 7, 6, 6 },
					{ 'H', 2, 2, 2 },
					{ 'I', 1, 3, 3 },
					{ 'J', 3, 1, 1 },
					{ 'K', 2, 2, 2 },
					{ 'L', 3, 5, 5 } };
int tm;

int main( void )
{
	char str[ 100 ];
	int rq[ 10 ];
	int memory[ 11 ];
	int n, m, p, l, tmp1;
	int l0, l1, l2, l3;

aa:
	for( l1 = 0; l1 < 12; l1++ )
	{
		data[ l1 ].t2 = data[ l1 ].t1;
	}
	clrscr();
	cout << "Ready Que" << endl;
	cout << "-------------------------------------------" << endl << endl;
	cout << "-------------------------------------------" << endl;
	cout << "                                        Work list" << endl;
	cout << "         Memory                         No.  Name  Size  Req.time  Stay time" << endl;
	cout << "        ---------                      --------------------------------------" << endl;
	cout << " Upper   |     |" << endl;
	cout << "         |     |" << endl;
	cout << "         |     |" << endl;
	cout << "         |     |" << endl;
	cout << "         |     |" << endl;
	cout << "         |     |" << endl;
	cout << "         |     |" << endl;
	cout << "         |     |" << endl;
	cout << "         |     |" << endl;
	cout << " Lower   |     |" << endl;
	cout << "        ---------" << endl << endl << endl;

	for( l1 = 0; l1 <= 10; l1++ ) memory[ l1 ] = -1;
	l0 = n = m = p = tm = 0;
	while( 1 )
	{
		for( l1 = 0; l1 < 12; l1++ )
		{
			if( data[ l1 ].t2 == 0 )
			{
				for( l2 = 0; l2 < n; l2++ )
				{
					if( rq[ l2 ] == l1 ) break;
				}
				if( l2 != n )
				{
					for( ; l2 < n; l2++ )
					{
						rq[ l2 ] = rq[ l2 + 1 ];
					}
					n--;
					if( p == n ) p--;
					for( l2 = 0; l2 < m; l2++ )
					{
						if( memory[ l2 ] == l1 )
						{
							for( l3 = l2; l3 < 10; l3++ )
							{
								memory[ l3 ] = memory[ l3 + 1 ];
							}
							l2--;
						}
					}
					m -= data[ l1 ].size;
				}
			}
		}
		for( ; l0 < 12; l0++ )
		{
			if( m + data[ l0 ].size <= 10 )
			{
				for( l1 = m; l1 < m + data[ l0 ].size; l1++ ) memory[ l1 ] = l0;
				m += data[ l0 ].size;
				rq[ n++ ] = l0;
			}
			else break;
		}
		gotoxy( 3, 3 );
		for( l1 = 0; l1 < 10; l1++ )
		{
			if( l1 < n )
			{
				cout << data[ rq[ l1 ] ].name << "  ";
			}
			else cout << "   ";
		}
		for( l1 = 0; l1 < 10; l1++ )
		{
			gotoxy( 13, 8 + l1 );
			if( memory[ l1 ] == -1 ) cout << ' ';
			else cout << data[ memory[ l1 ] ].name;
		}
		for( l1 = 0; l1 < 12; l1++ )
		{
			gotoxy( 41, l1 + 8 );
			cout.width( 2 );
			cout << l1 + 1 << "     " << data[ l1 ].name << "     " << data[ l1 ].size << "      " << data[ l1 ].t1 << "         ";
			if( data[ l1 ].t2 == 0 ) cout << "End"; else cout << ' ' << data[ l1 ].t2;
		}
		data[ rq[ p ] ].t2--;
		p++;
		if( p >= n ) p = 0;
		gotoxy( 1, 22 );
		cout << "Time : " << tm;
		tm++;
		getch();
		if( n == 0 ) break;
	}
bb:
	gotoxy( 1, 24 ); cout << "																			";
	gotoxy( 1, 24 );
	cout << "Retry? "; cin.getline( str, 100, '\n' );
	l = strlen( str ); tmp1 = 0;
	for( l1 = 0; l1 < l; l1++ )
	{
		if( str[ l1 ] != ' ' ) tmp1++;
	}
	if( tmp1 != 1 ) goto bb;
	for( l1 = 0; l1 < l; l1++ )
	{
		if( str[ l1 ] != ' ' )
		{
			if( tolower( str[ l1 ] ) == 'y' ) goto aa;
			else if( tolower( str[ l1 ] ) == 'n' ) return 0;
			else goto bb;
		}
	}

	return 0;
}