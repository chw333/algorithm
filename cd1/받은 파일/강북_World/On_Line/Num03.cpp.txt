#include <fstream.h>

char map[100][100];
int n,m,gn=0,size[100]={0},lines[100][100]={0},huge box[100][100][4]={0};

void main(void)
{
    int i,j,k,l,max,md,tmp,boxer,tt;
    char instr[100];
    cout << "Input Columns and Rows : ";
    cin >> m >> n;
    cin.getline(instr,100);
    for(i=0;i<n;i++)
    {
        cout << i+1 << "Row ? ";
        cin.getline(instr,100);
        for(j=0;j<m;j++)
            map[i+1][j+1]=instr[j*2];
    }
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
        {
            box[i][j][1]=box[i-1][j][3];
            size[box[i][j][1]]++;
            box[i][j][0]=box[i][j-1][2];
            size[box[i][j][0]]++;
            if(map[i][j]=='a')
            {
                box[i][j][2]=box[i][j][1];
                box[i][j][3]=box[i][j][0];
                size[box[i][j][2]]++;
                size[box[i][j][3]]++;
                if(j==m)
                {
                    tmp=box[i][j][2];
                    size[tmp]=0;
                    for(k=1;k<=n;k++)
                    {
                        for(l=1;l<=m;l++)
                        {
                            if(box[k][l][0]==tmp)
                                box[k][l][0]=0;
                            if(box[k][l][1]==tmp)
                                box[k][l][1]=0;
                            if(box[k][l][2]==tmp)
                                box[k][l][2]=0;
                            if(box[k][l][3]==tmp)
                                box[k][l][3]=0;
                        }
                    }
                }
                if(i==n)
                {
                    tmp=box[i][j][3];
                    size[tmp]=0;
                    for(k=1;k<=n;k++)
                    {
                        for(l=1;l<=m;l++)
                        {
                            if(box[k][l][0]==tmp)
                                box[k][l][0]=0;
                            if(box[k][l][1]==tmp)
                                box[k][l][1]=0;
                            if(box[k][l][2]==tmp)
                                box[k][l][2]=0;
                            if(box[k][l][3]==tmp)
                                box[k][l][3]=0;
                        }
                    }
                }
            }
            if(map[i][j]=='b')
            {
                if((j!=m) && (i!=n))
                {
                    box[i][j][2]=gn++;
                    box[i][j][3]=gn-1;
                    size[gn-1]=2;
                }
                if(box[i][j][0]!=box[i][j][1])
                {
                    if(box[i][j][0]==0)
                    {
                        tmp=box[i][j][1];
                        size[tmp]=0;
                        for(k=1;k<=n;k++)
                        {
                            for(l=1;l<=m;l++)
                            {
                                if(box[k][l][0]==tmp)
                                    box[k][l][0]=0;
                                if(box[k][l][1]==tmp)
                                    box[k][l][1]=0;
                                if(box[k][l][2]==tmp)
                                    box[k][l][2]=0;
                                if(box[k][l][3]==tmp)
                                    box[k][l][3]=0;
                            }
                        }
                    }
                    else if(box[i][j][1]==0)
                    {
                        tmp=box[i][j][0];
                        size[tmp]=0;
                        for(k=1;k<=n;k++)
                        {
                            for(l=1;l<=m;l++)
                            {
                                if(box[k][l][0]==tmp)
                                    box[k][l][0]=0;
                                if(box[k][l][1]==tmp)
                                    box[k][l][1]=0;
                                if(box[k][l][2]==tmp)
                                    box[k][l][2]=0;
                                if(box[k][l][3]==tmp)
                                    box[k][l][3]=0;
                            }
                        }
                    }
                    else
                    {
                        tmp=box[i][j][1];
                        size[tmp]=0;
                        for(k=1;k<=n;k++)
                        {
                            for(l=1;l<=m;l++)
                            {
                                if(box[k][l][0]==tmp)
                                {
                                    box[k][l][0]=box[i][j][0];
                                    size[box[i][j][0]]++;
                                }
                                if(box[k][l][1]==tmp)
                                {
                                    box[k][l][1]=box[i][j][0];
                                    size[box[i][j][0]]++;
                                }
                                if(box[k][l][2]==tmp)
                                {
                                    box[k][l][2]=box[i][j][0];
                                    size[box[i][j][0]]++;
                                }
                                if(box[k][l][3]==tmp)
                                {
                                    box[k][l][3]=box[i][j][0];
                                    size[box[i][j][0]]++;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    max=0;boxer=0;
    for(i=1;i<gn;i++)
    {
        if(size[i]>max)
        {
            max=size[i];
            md=i;
        }
        if(size[i])
            boxer++;
    }
    cout << "Number of Closed Box : " << boxer << endl;
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
        {
            for(k=0;k<4;k++)
            {
                if(box[i][j][k]==md)
                    lines[i][j]=1;
            }
        }
    }
    tt=0;
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(lines[i][j])
            {
                if((lines[i-1][j]) && (lines[i][j-1]) && (lines[i+1][j]) && (lines[i][j+1]))
                    lines[i][j]=2;
                else
                    tt++;
            }
        }
    }
    cout << "Maximum Woodstick Number : " << tt << endl;
}