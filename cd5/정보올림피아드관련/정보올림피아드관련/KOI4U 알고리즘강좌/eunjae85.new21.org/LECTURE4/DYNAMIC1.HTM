<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<title>동적계획법의 소개</title>
<meta name="generator" content="Namo WebEditor v3.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

<p style="line-height:130%;">동적계획법의 소개</p>
<p style="line-height:130%;">KOI에 관심을 갖고 계신 분이라면 동적계획법(Dynamic 
programming : 다이나믹 프로그래밍)에 대해서 조금은 들어 보셨으리라 생각합니다. 
동적계획법을 사용하면 여러 최적해 문제를 쉽고 깔끔해서 풀 수 있기 때문에 필히 
익혀 두어야 합니다.</p>
<p style="line-height:130%;">참고로 KOI에서는 13회부터 매년 세 문제 중 한 문제는 
동적계획법 문제를 출제하고 있습니다. 이제 동적 계획법이 차지하는 비중이 얼마나 
막강한지 아시겠죠?</p>
<p style="line-height:130%;">동적계획법의 정의 - 작은 문제들의 해를 배열에 저장한 
다음 그것들을 순환적(recursive)인 성질을 이용하여 결합해 큰 문제의 해를 구한다.</p>
<p style="line-height:130%;">특징을 차근차근 살펴보기로 하겠습니다.</p>
<p style="line-height:130%;">1. 동적계획법은 해를 저장하는 <font color="navy"><b>배열을 
사용</b></font>한다. (흔히 테이블이라고 하죠)</p>
<p style="line-height:130%;">동적계획법이 분할정복 (Divide and conquer : 큰 
문제의 해를 쪼개 작은 문제의 해를 구하는 방식)과 구별되는 가장 큰 특징입니다. 
배열을 이용하면 똑같은 문제에 대한 답을 여러 번 구할 필요가 없다는 것입니다.</p>
<p style="line-height:130%;">2. 동적계획법은 <font color="navy"><b>순환적인 
성질</b></font>을 이용한다.</p>
<p style="line-height:130%;">동적계획법은 '점화식'이란 것을 사용합니다. 이 점화식은 
큰 문제와 작은 문제간의 관계를 나타내는 식입니다. 큰 문제를 풀기 위해서는 작은 
문제에 대한 답을 미리 구해 놓아야 한다는 뜻이 됩니다.</p>
<p style="line-height:130%;">동적계획법이 확실히 유용한 알고리즘 설계기법이긴 
하지만 어떤 문제에든지 적용할 수 있는 것은 아닙니다. 동적계획법이 성립하기 위해서는 
최적화 원리 (Principal of optimality)가 성립해야 합니다.</p>
<p style="line-height:130%;"><font color="red">최적화 원리</font> - <font color="teal">한 
문제에 대한 해가 최적이면 그 문제를 이루는 부분 문제들의 해도 최적이다.</font></p>
<p align="center" style="line-height:130%;">&nbsp;<img src="dynamic1.gif" width="395"
 height="267" border="0"></p>
<p align="left" style="line-height:130%;">위의 그림은 최적화의 원리를 잘 나타내 
주고 있습니다. 과연 학교에서 오락실과 당구장을 거쳐 최단거리로 가는 문제는 최적화의 
원리를 성립할까요? 위의 문제에서 큰 문제는 학교에서 집으로 가는 것이고, 작은 
문제는 학교에서 오락실, 오락실에서 당구장, 오락실에서 집 등입니다.(오락실에서 
집으로 가는 것도 전체에 비하면 부분문제입니다..)</p>
<p align="left" style="line-height:130%;">그림 A는 학교에서 집으로 가는 최단거리를 
나타내 주고 있습니다. 만약 오락실에서 당구장으로 가는 길이 최단거리가 아니라고 
합시다(그림 B). 그럼 과연 전체 경로 (그림 C)는 최단거리일까요? 당연히 아니죠?</p>
<p align="left" style="line-height:130%;">즉 위의 문제는</p>
<p align="left" style="line-height:130%;">'부분 문제들의 해가 최적이 아니라면 
큰 문제의 해가 최적이 아니다' 가 성립합니다.</p>
<p align="left" style="line-height:130%;">이것의 대우를 취하면, (이거 모르시면 
큰일인데.. -_-;)</p>
<p align="left" style="line-height:130%;">'큰 문제의 해가 최적이면 부분 문제들의 
해가 최적이다'가 성립합니다! 고로 이 문제는 최적화의 원리가 성립하는 문제입니다. 
즉, 동적계획법을 적용하면 최적의 답을 얻을 수 있는 문제입니다.</p>
<p align="left" style="line-height:130%;">동적 계획법 문제를 풀기 위해서는 다음과 
같은 것들을 고려해야 합니다. 차차 예제를 통해 차근차근 배워나가도록 하겠습니다.</p>
<p align="left" style="line-height:130%;">1. 문제가 최적화의 원리가 성립하는지 
검사(즉 동적 계획법으로 해결할 수 있는지)</p>
<p align="left" style="line-height:130%;">2. 부분문제를 정의한다.</p>
<p align="left" style="line-height:130%;">3. 우리가 구해야 하는 큰 문제는 어떻게 
정의되는지 알아본다.</p>
<p align="left" style="line-height:130%;">4. 큰 문제와 작은 문제간의 관계를 
찾는다. 즉, 점화식을 구한다.</p>
<p align="left" style="line-height:130%;">5. 점화식을 통해 작은 문제들을 어떤 
순서로 구해 나갈 것인지를 결정한다.</p>
<p align="left" style="line-height:130%;">6. 답을 얻는 과정을 추적하는 방법을 
세워야 한다.</p>
<p align="left" style="line-height:130%;">단 6번 과정은 문제에 따라 생략하는 
경우도 많습니다. 이제 동적계획법을 실제 문제에 어떻게 적용하고 해결하는지 차근차근 
알아보도록 하겠습니다. 많은 관심 바랍니다.</p>
</body>

</html></html>