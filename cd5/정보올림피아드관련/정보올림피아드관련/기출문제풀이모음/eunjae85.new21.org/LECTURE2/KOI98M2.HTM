<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<title>연결사각형</title>
<meta name="generator" content="Namo WebEditor v3.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

<p style="line-height:130%;">연결사각형</p>
<p style="line-height:130%;">이 문제의 경우 특별한 풀이법이 없는 문제입니다. 
하는 수 없이 여러 가지 휴리스틱을 생각해야 합니다. 하지만 그리디나 보통 랜덤의 
경우 주어진 제한시간 10초를 짜임새 있게 쓰지 못하고 해를 좋게 개선시키지 못하는 
단점이 있습니다.</p>
<p style="line-height:130%;">이 문제를 시뮬레이트 어닐링 (Silmulated Annealing)으로 
접근해 보았습니다. 이 시뮬 어닐링은 특별한 알고리즘이 존재하지 않고, 만사가 
다 귀찮고, 편하게 문제를 풀고 싶을 때 최적의 방법입니다. 이거 한번 맛들이면 
프로그램 습관 버리는 금단의 방법이라고 생각하시면 되겠습니다. -_-; 그래서 저도 
어지간해서는 잘 쓰지 않습니다.</p>
<p style="line-height:130%;">하지만 막상 대회에서는 지푸라기라도 잡아야 하니까 
일단 사용하는 방법은 알아두시는 게 좋겠죠.</p>
<p style="line-height:130%;">일단 이 방법의 원리부터 말씀드리겠습니다. 큰 갈래는 
몬테카를로법을 이용한 확률알고리즘입니다. 원래는 신경망을 빠른 시간에 학습시키기 
위해 물리학에서 힌트를 얻어온 방법인데, 의외로 조합폭발적 문제(한마디로 다 돌리는데 
무지하게 시간 오래걸리는 것..)를 푸는데 효과적이라는 것이 발견되어 많이 쓰이고 
있습니다.</p>
<p style="line-height:130%;">큰 패트병에 자갈을 담습니다. 그리고 다시 모래를 
붓습니다. 처음에는 모래가 자갈속으로 들어가지 않아 부피가 꽤 크죠. 패트병을 
흔들어줍니다. 그럼 모래가 자갈 사이로 들어가면서 병의 부피가 점점 줄어들 것입니다. 
이렇게 계속 하면 언젠가는 패트병 속에 든 자갈과 모래의 부피가 최소가 될 것이라고 
기대할 수 있습니다.</p>
<p style="line-height:130%;">시뮬 어닐링도 마찬가지의 원리입니다. 패트병을 흔들어주는 
것은 해를 랜덤하게 변화시킨다는 거구요. 이렇게 충분한 시간동안 반복하면 언젠가는 
최적의 답을 구해준다는 것이 증명되어 있습니다.</p>
<p style="line-height:130%;">해를 랜덤하게 변화시킬 때 크게 두 가지 경우가 있는데, 
</p>
<p style="line-height:130%;">1. 답이 더 좋아졌다. -&gt; 당연히 변화를 허용함<br>
2. 답이 더 나빠졌다. -&gt; 허용할 수도 있고 허용하지 않을 수도 있다. 허용하는 
경우는 2보 전진을 위한 1보 후퇴라고도 볼 수 있다. ^^;</p>
<p style="line-height:130%;">1, 2번 경우 모두 아래의 식 하나로 해결이 됩니다. 
2번의 경우는 확률에 따라 변화가 허용될 수도 있고 허용되지 않을 수도 있습니다. 
</p>
<p style="line-height:130%;">흔들 때 처음에는 모래가 큰 폭으로 움직이면서 자기 
자리를 찾을 것입니다. 하지만 점점 흔들면서 모래가 움직이는 폭이 작아지고 언젠가는 
고정이 되게 됩니다. 시뮬 어닐링도 마찬가지 아이디어를 사용합니다.</p>
<p style="line-height:130%;">먼저 맨 처음의 상태는 온도가 높은 상태입니다. 보통 
1.0도로 잡습니다. 이 온도를 감소함수라는 것을 사용해서 꾸준히 감소시킵니다. 
보통...</p>
<p style="line-height:130%;">t = t * 0.99</p>
<p style="line-height:130%;">이런 방법을 사용합니다. 이렇게 하면 온도가 점점 
줄어듭니다. 온도가 높을 때에는 (초기상태) 해가 큰 폭으로 변하는 것을 허용하지만 
온도가 낮을 때에는 (완성단계) 해는 소폭으로 변합니다.</p>
<p style="line-height:130%;">해가 변형시키는 것은 랜덤을 이용하구요.. 식은 다음과 
같습니다.</p>
<p style="line-height:130%;">exp((원래의해-변형된해)/(온도*상수)) &gt; random</p>
<p style="line-height:130%;">random은 0부터 1사이의 실수를 되돌리는 함수입니다. 
exp라는 지수함수를 이용하는 것을 눈여겨 볼 수 있지요. 위의 경우는 해를 최소화시키고자 
할 때 쓰고, 이 문제처럼 해를 최대화하고 싶을 때는, (원래의해-변형된해)를 (변형된해-원래의해)로 
고쳐주면 됩니다.</p>
<p style="line-height:130%;">변형된 해가 좋아진 경우엔 exp(...)에서 ...부분이 
양수이기 때문에 &nbsp;exp(...)은 항상 1보다 큽니다. 따라 항상 변형된 해를 허용하구요,</p>
<p style="line-height:130%;">변형된 해가 나빠진 경우엔 ...부분이 음수가 되기 
때문에 확률에 따라서 허용할 경우도 있고 허용하지 않을 경우도 있습니다. 처음 
온도가 높을 때에는 해가 나빠지더라도 허용할 확률이 높습니다. 온도가 낮아짐에 
따라 그 확률은 점점 낮아지지요..</p>
<p style="line-height:130%;">위의 식에서 상수라는 것은 변형된 해가 나쁠 때 변화를 
허용하는 확률에 영향을 미칩니다. 이 상수가 높으면 높을수록 그 확률이 높아지게 
되는데요, 실험을 통해 적당한 값을 써 넣으면 됩니다. (아래의 제 소스에서는 써놓지 
않았어요..)</p>
<p style="line-height:130%;">아래 소스에서 ln은 exp의 역함수입니다.(자연로그..) 
이것에 대해서는 묻지 마세요.. -_-;;</p>
<p style="line-height:130%;">설명이 약간 난잡하지만(지금 시간이 없어서..) 아래 
소스는 그럭저럭 간단하니 읽고 이해하시길 바랍니다. 이해가 안가시는 부분은 질문/답변 
게시판에 써주세요. (단 처음부터 다시 설명해 달라는 등의 질문은 즉각 삭제합니다.. 
-_-)</p>
<p style="line-height:130%;">사족을 달자면 cost는 현재 해의 값, solution은 현재 
해를 나타냅니다. 온도 감소함수는 *0.97 로 잡았구요.. 한 루프가 끝나더라도 10초 
채울 때까지는 계속 돌립니다. 해의 변화는 1부터 n사이의 한 i를 랜덤하게 잡아 
선택되지 않은 상태면 선택하고 선택된 상태면 선택하지 않습니다.</p>
<p style="line-height:130%;">사각형을 새롭게 선택하면 기존에 선택된 사각형과 
겹치는 경우가 생기는데 그럼 겹치는 사각형들은 선택에서 빼줍니다. </p>
<p style="line-height:130%;"><font face="굴림체">program KOI98M2;</font></p>
<p style="line-height:130%;"><font face="굴림체">type<br>
&nbsp;&nbsp;box = record<br>
&nbsp;&nbsp;&nbsp;&nbsp;x1, y1, x2, y2 : integer;<br>
&nbsp;&nbsp;end;</font></p>
<p style="line-height:130%;"><font face="굴림체">var<br>
&nbsp;&nbsp;n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 
integer;<br>
&nbsp;&nbsp;a &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 
array[1..50] of box;<br>
&nbsp;&nbsp;stime &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: longint;<br>
&nbsp;&nbsp;Timer &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: longint 
absolute $0040:$006C;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;solution, best: 
array[1..50] of boolean;<br>
&nbsp;&nbsp;bestcost &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: integer;</font></p>
<p style="line-height:130%;"><font face="굴림체">function min (a, b : integer) 
: integer;<br>
begin<br>
&nbsp;&nbsp;if a &gt; b then min := b<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else min := 
a;<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">function max (a, b : integer) 
: integer;<br>
begin<br>
&nbsp;&nbsp;if a &gt; b then max := a<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else max := 
b;<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">procedure input_file;<br>
var<br>
&nbsp;&nbsp;f : text;<br>
&nbsp;&nbsp;t : box;<br>
&nbsp;&nbsp;i : integer;<br>
begin<br>
&nbsp;&nbsp;assign (f, 'input.txt');<br>
&nbsp;&nbsp;reset (f);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;read (f, n);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;for i := 1 to n 
do begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;read (f, t.x1, t.y1, t.x2, t.y2);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;a[i].x1 
:= min (t.x1, t.x2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;a[i].y1 := min (t.y1, t.y2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;a[i].x2 := max (t.x1, t.x2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;a[i].y2 := max (t.y1, t.y2);<br>
&nbsp;&nbsp;end;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;close (f);<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">procedure output_file;<br>
var<br>
&nbsp;&nbsp;f : text;<br>
&nbsp;&nbsp;i, c : integer;<br>
begin<br>
&nbsp;&nbsp;assign (f, 'output.txt');<br>
&nbsp;&nbsp;rewrite (f);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;c := 0;<br>
&nbsp;&nbsp;for i := 1 to n do<br>
&nbsp;&nbsp;&nbsp;&nbsp;if best[i] then inc (c);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;writeln (f, c);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;for i := 1 to n 
do<br>
&nbsp;&nbsp;&nbsp;&nbsp;if best[i] then writeln (f, i);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;close (f);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;halt;<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">function hitcheck (a, b : box) 
: boolean;<br>
begin<br>
&nbsp;&nbsp;if (a.x2 &gt;= b.x1) and (a.x1 &lt;= b.x2) and<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(a.y2 &gt;= b.y1) and (a.y1 &lt;= b.y2) then hitcheck 
:= true<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
hitcheck := false;<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">procedure solve;<br>
var<br>
&nbsp;&nbsp;t &nbsp;&nbsp;&nbsp;&nbsp;: double;<br>
&nbsp;&nbsp;cost &nbsp;: integer;<br>
&nbsp;&nbsp;i, j &nbsp;: integer;<br>
&nbsp;&nbsp;delta : integer;<br>
begin<br>
&nbsp;&nbsp;while true do begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;t := 1.0;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;cost 
:= 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;for i := 1 to n do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution[i] := false;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;while 
t &gt; 0.0001 do begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if Timer - stime &gt; 180 then output_file;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i 
:= random (n) + 1;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
solution[i] then begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta := -i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end else begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta := i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for j := 1 to n do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if solution[j] and 
hitcheck (a[i], a[j]) then delta := delta - j;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(delta / t) &gt; ln (random) then begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not solution[i] then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for j := 1 to n 
do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if solution[j] 
and hitcheck (a[i], a[j]) then solution[j] := false;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution[i] 
:= not solution[i];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost := cost + delta;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
cost &gt; bestcost then begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestcost := cost;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;best := solution;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t 
:= t * 0.97;<br>
&nbsp;&nbsp;&nbsp;&nbsp;end;<br>
&nbsp;&nbsp;end;<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">begin<br>
&nbsp;&nbsp;randomize;<br>
&nbsp;&nbsp;stime := Timer;<br>
&nbsp;&nbsp;bestcost := -1;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;input_file;<br>
&nbsp;&nbsp;solve;<br>
&nbsp;&nbsp;output_file;<br>
end.</font></p>
</body>

</html></html>