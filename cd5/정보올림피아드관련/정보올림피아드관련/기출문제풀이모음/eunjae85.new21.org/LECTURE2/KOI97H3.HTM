<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<title>벽장문의 이동</title>
<meta name="generator" content="Namo WebEditor v3.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

<p style="line-height:130%;">벽장문의 이동</p>
<p style="line-height:130%;">동적계획법을 이용해 풀 수 있는 문제입니다. (파란색 
정보올림피아드 책에는 휴리스틱 문제라고 소개되어 백트래킹 풀이가 있는데, 그 
책이 틀렸습니다) 여기서는 memoization이라는 테크닉을 이용해서 프로그램을 작성하도록 
하겠습니다. memoization에 대해서는 동적 계획법 강좌에 적어놓았으니 참고하시기 
바랍니다.</p>
<p style="line-height:130%;">이 문제를 동적 계획법을 이용하여 푸는 데에도 여러 
가지 방법이 존재하는데, 여기서는 가장 간단하고 원초적이며 무식한 방법을 쓰도록 
하겠습니다. 그 무식함에 걸맞게 테이블 배열도 3차원을 씁니다.</p>
<p style="line-height:130%;">이제 부분문제 함수 C를 정의해 보도록 하겠습니다. 
(보통 책이나 인터넷 자료들을 보면 부분문제 함수를 나타낼 때 알파벳 C를 자주 
쓰더군요. 왜 그런지는 잘 모르겠지만 저도 전통을 따르도록 하겠습니다.) W[i]는 
i번째 순서에 사용해야 할 벽장의 위치입니다. M은 사용할 벽장들의 수입니다.</p>
<p style="line-height:130%;">C[i, j, k] = 왼쪽 문의 위치가 j, 오른쪽 문의 위치가 
k일 때, W[i] ~ W[M] 의 벽장을 사용할 때 필요한 문의 최소 이동 수</p>
<p style="line-height:130%;">조금 복잡한 것 같아 보이지만 아래 소스를 보면 쉽게 
이해가 가니 미리 겁먹으실 필요는 없습니다. 위의 정의에 따르면 우리가 구해야 
하는 답은 C[1, a, b]가 됩니다. (a, b는 초기에 열려있는 문의 위치라고 합시다.)</p>
<p style="line-height:130%;">만약 W[i]가 j보다 작다면(즉 사용할 문이 이미 열려있는 
문들보다 왼쪽에 있다면) 당연히 왼쪽 문을 왼쪽으로 이동해야 합니다. 반대로 W[i]가 
k보다 크다면(즉 사용할 문이 이미 열려있는 문들보다 오른쪽에 있다면) 당연히 오른쪽 
문을 오른쪽으로 움직여야 합니다.</p>
<p style="line-height:130%;">사용하고자 하는 문지 왼쪽 문 오른쪽 문의 가운데에 
있다면? 섣불리 어느 쪽 문을 가운데로 움직여야 할지 정할 수 없게 됩니다. 이런 
경우는 왼쪽 문을 움직이는 경우, 오른쪽을 움직이는 경우를 비교해서 더 효율적인 
선택을 하면 됩니다.</p>
<p style="line-height:130%;">아래에 소스를 적어보았습니다. memoization 부분에는 
간단한 주석을 달아 보았습니다.</p>
<p style="line-height:130%;"><font face="굴림체">program KOI97H3;</font></p>
<p style="line-height:130%;"><font face="굴림체">const<br>
&nbsp;&nbsp;unknown = -1;</font></p>
<p style="line-height:130%;"><font face="굴림체">var<br>
&nbsp;&nbsp;table : array[1..21, 1..20, 1..20] of integer;<br>
&nbsp;&nbsp;work : array[1..20] of integer;<br>
&nbsp;&nbsp;n, m : integer;<br>
&nbsp;&nbsp;a, b : integer;</font></p>
<p style="line-height:130%;"><font face="굴림체">procedure input_file;<br>
var<br>
&nbsp;&nbsp;f : text;<br>
&nbsp;&nbsp;i : integer;<br>
begin<br>
&nbsp;&nbsp;assign (f, 'input.txt');<br>
&nbsp;&nbsp;reset (f);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;read (f, n);<br>
&nbsp;&nbsp;read (f, a, b);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;read (f, m);<br>
&nbsp;&nbsp;for i := 1 to m do<br>
&nbsp;&nbsp;&nbsp;&nbsp;read (f, work[i]);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;close (f);<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">procedure inittable;<br>
var<br>
&nbsp;&nbsp;i, j, k : integer;<br>
begin<br>
&nbsp;&nbsp;for i := 1 to m do<br>
&nbsp;&nbsp;&nbsp;&nbsp;for j := 1 to n do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for k := 1 to n do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table[i, j, k] := unknown; &nbsp;{memoization을 
사용하기 위하여 초기화를 시켜줌}<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">function min (a, b : integer) 
: integer;<br>
begin<br>
&nbsp;&nbsp;if a &gt; b then min := b<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else min := 
a;<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">function c (i, j, k : integer) 
: integer;<br>
begin<br>
&nbsp;&nbsp;if table[i, j, k] = unknown then begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;if i &gt; m then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table[i, j, k] := 0 {i가 m보다 크다면 할 
일이 없다는 뜻이므로 0}<br>
&nbsp;&nbsp;&nbsp;&nbsp;else begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if work[i] &lt;= j then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table[i, j, k] := (j - work[i]) 
+ c(i + 1, work[i], k) &nbsp;{왼쪽 문을 왼쪽으로}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if k &lt;= work[i] then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table[i, j, k] := (work[i] - 
k) + c(i + 1, j, work[i]) &nbsp;{오른쪽 문을 오른쪽으로}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table[i, j, k] := min ((work[i] 
- j) + c(i + 1, work[i], k), &nbsp;{왼쪽 문을 옮길까..}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(k 
- work[i]) + c(i + 1, j, work[i])); {오른쪽 문을 옮길까?}<br>
&nbsp;&nbsp;&nbsp;&nbsp;end;<br>
&nbsp;&nbsp;end;</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;c := table[i, j, 
k];<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">procedure output_file;<br>
var<br>
&nbsp;&nbsp;f : text;<br>
begin<br>
&nbsp;&nbsp;assign (f, 'output.txt');<br>
&nbsp;&nbsp;rewrite (f);</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;writeln (f, c (1, 
a, b)); {답을 출력}</font></p>
<p style="line-height:130%;"><font face="굴림체">&nbsp;&nbsp;close (f);<br>
end;</font></p>
<p style="line-height:130%;"><font face="굴림체">begin<br>
&nbsp;&nbsp;input_file;<br>
&nbsp;&nbsp;inittable;<br>
&nbsp;&nbsp;output_file;<br>
end.</font></p>
</body>

</html></html>