<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<title>KOI 13회 중등부 1.</title>
<meta name="generator" content="Namo WebEditor v3.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

<table border="0" width="595">
    <tr>
        <td width="383" height="27" bgcolor="#CFD3FF"><p><font size="4"><b>&nbsp;&nbsp;KOI 
            17회 고등부 3. 주차장</b></font></td>
        <td width="100" height="27" bgcolor="#CFD3FF"><p align="center"><a href="pkoi00h3.htm"><img src="button1.gif"
             width="72" height="22" border="0"></a></td>
        <td width="100" height="27" bgcolor="#CFD3FF"><p align="center"><a href="ckoi00h3.htm"><img src="button3.gif"
             width="72" height="22" border="0"></a></td>
    </tr>
</table>
<ul>
    <p>&nbsp; 
    <table border="0">
            <tr>
                <td width="550"><p style="line-height:150%;"><font size="2">&nbsp;&nbsp;정답만을 
                출력해야 했던 1, 2번 문제와는 달리 그럭저럭 쓸만한 답을 요구하는 
                휴리스틱 문제이다. 이런 유형의 대부분의 문제는 최적의 답을 구하는 
                빠르고 명쾌한 알고리즘이 없다. 말 그대로 휴리스틱, 사람의 경험을 
                동원해 풀어야 하는 문제이다.<br></font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;이 문제는 
                중등부 3번 문제와 같은 문제이다. 참고로 퍼즐 책 등에 많이 소개된 
                문제이기도 한데 </font><a href="http://www.educat.co.kr/game/game.html"><font
                 size="2">http://www.educat.co.kr/game/game.html</font></a> 
                <font size="2">에 가보면 똑같은 게임을 볼 수 있다. 사람도 잘 
                못해 버벅거리는 문제를 어찌 돌머리 컴퓨터가 해결하겠는가!</font></p>
                <p align="center" style="line-height:150%;"><font size="2"><img src="skoi00m3-1.gif"
                 width="264" height="275" border="0"></font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;컴퓨터는 
                돌머리이긴 하지만, 초당 수억 이상의 계산을 할 수 있는 물건이다. 
                따라서 인공지능 비슷한 흉내를 내려면 빠른 속도를 통해 무식함을 
                커버해야 한다. 딱히 좋은 해법이 있는 문제는 아니지만, 크게 백트래킹과 
                랜덤을 이용한 풀이법을 생각해 볼 수 있다.<br></font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;뺄 차가 
                앞에 차에 가로 막혀 나가지 못하고 있다고 하자. 그럼 다시 앞의 
                차를 움직여야 하는데, 이 차는 다른 차에 가로 막혀 있을 수 있다. 
                그럼 다시 그 차를 움직여야 하고... 이런 식으로 반복하는 방법이 
                백트래킹이다. 물론 이 경우는 답을 찾았을 경우 매우 만족할 만한 
                결과를 보여준다. 하지만 고약한 입력 데이터에 대해서는 아예 답을 
                찾지 못할 수 있으며, 무엇보다도 프로그램 작성이 매우 힘들다.<br></font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;랜덤을 
                이용한 방법을 한마디로 말하자면 &quot;흔들기&quot;이다. 그냥 
                아무 차나 아무렇게나 움직이면서(물론 아무, 아무렇게나에 각자의 
                노하우가 발휘되지만..) 차를 빼는 시도를 하는 것이다. 운이 좋으면 
                답을 찾을 수도 있다(물론 좋은 답은 절대 아니지만, 차를 빼는 
                게 어디인가). 사실 이렇게 답을 찾는 것이 포트리스 한번에 접속하는 
                것보다 더 어렵게 느껴질 수 있긴 하지만, 사실 컴퓨터는 매우 빠른 
                기계라 제한시간 10초 내에 수만, 수십만 번 이상 차를 움직이므로, 
                거의 대부분의 경우에는 답을 찾는다. 이 방법의 장점은 역시 프로그래밍이 
                간단하다는 것이다.&nbsp;또한 구한 답을 개선시킨다면(불필요한 
                차의 움직임을 줄이는 방법으로) 어느 정도 좋은 답을 구할 수 있을 
                것이다.</font></td>
        </tr>
    </table>
    <p>&nbsp;</p>
</ul>
</body>

</html></html>