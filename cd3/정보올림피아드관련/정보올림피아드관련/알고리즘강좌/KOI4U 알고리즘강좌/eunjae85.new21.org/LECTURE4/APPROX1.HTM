<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<title>KOI 13회 중등부 1.</title>
<meta name="generator" content="Namo WebEditor v3.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

<table border="0" width="595">
    <tr>
        <td width="589" height="27" bgcolor="#CFD3FF"><p><font size="4"><b>&nbsp;&nbsp;휴리스틱을 
            알려주마 (1) - 휴리스틱 살펴보기</b></font></td>
    </tr>
</table>
<ul>
    <p>&nbsp; 
    <table border="0">
            <tr>
                <td width="550"><p style="line-height:150%;"><font size="2">&nbsp;&nbsp;정보올림피아드를 
                준비하는 사람이라면 휴리스틱에 대해서 한 번쯤 들어 보았으리라 
                생각됩니다. 이 강좌(?)에서는, 여러 휴리스틱한 방법 (그리디 메소드, 
                백트래킹, 브랜치 앤 바운드, 근사 알고리즘 등)에 대해서 살펴 
                볼까 합니다. 먼저 강좌에 들어가기 전에,</font></p>
                <p style="line-height:150%;"><font size="2">* 저도 전공인이 
                아닌 관계로 여러 가지 용어 사용이나 설명 과정 중에 오류가 상당히 
                많이 있을 수 있습니다. 그런 것들을 찾으시면 속으로만 비웃지 
                마시고, 수정할 수 있도록 알려주시기 바랍니다. 사실 이 글을 쓰려고 
                휴리스틱이란 과연 무엇인지 -_-; 찾아보려고 했으나 책마다 다 
                뜻이 조금씩은 다른 듯 해서 무척 혼란스러웠습니다 *</font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;일단 
                휴리스틱이라는 단어에 대해서 좀 짚고 넘어가도록 하겠습니다. 
                일단 글자 그대로의 정의는 &quot;인간의 경험적 지식&quot;을 말합니다. 
                여기서는 보통의 알고리즘들이 항상 정확한 답을 찾아주는 것과는 
                반대로 </font><font size="2" color="red">&quot;항상 최적은 아니지만 
                합리적인 답을 찾아주는 알고리즘&quot;</font><font size="2"> 
                이라고 제멋대로 정의하도록 하겠습니다.</font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;컴퓨터에 
                있어서 문제란 무엇인가요? &quot;어떤 입력들이 있을 때, 그 입력을 
                문제에서 정의한 어떤 규칙에 의하여 출력으로 가공하도록 요구하는 
                것&quot;이라고 생각하면 되겠네요. 알고리즘이란 그 입력을 출력으로 
                가공하는 방법에 대해서 기술한 것이구요. 그럼 최적은 무엇일까?</font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;어떤 
                일을 하는 방법에는 여러 가지 방법이 있습니다. 예를 들어서, N개의 
                도시를 한번씩 거쳐서 원래의 도시로 돌아오는 최소 길이의 경로를 
                찾는 문제(TSP)를 생각해 봅시다. 여기서 최적의 답이란 &quot;최소 
                길이의 경로&quot;가 됩니다. 다음 그림에서 왼쪽은 최적의 답이 
                되겠지만, 오른쪽 그림은 최적의 답이 아니죠.</font></p>
                <p align="center" style="line-height:150%;"><font size="2"><img src="approx1-1.gif"
                 width="320" height="172" border="0"></font></p>
                <p style="line-height:150%;"><font size="2" color="red">&nbsp;&nbsp;최적화란 
                최적의 답을 찾아가는 과정을 말합니다. </font><font size="2">위에서는 
                6개의 도시가 있습니다. 이 6개의 도시를 여행할 수 있는 경로의 
                수는 (6-1)! = 5 * 4 * 3 * 2 * 1 = 120가지나 됩니다. 컴퓨터의 
                입장에서 보면 별 것 아닐지도 모릅니다. 모든 여행 경로의 수를 
                따져서 하나하나 답을 비교해 보고 가장 좋은 답을 찾으면 되겠지요. 
                하지만 항상 이런 방법이 가능한 것은 아닙니다. 만약에 도시의 
                수가 100개라고 합시다. 그럼 여행 경로의 수는 (100-1)! = 100 
                * 99 * ... * 3 * 2 * 1 이 될 것입니다. 이 값은 자그마치,</font></p>
                <p style="line-height:150%;"><font size="2">933262154439441526816992388562667004907159682643816214685929638952175999932299<br>
                156089414639761565182862536979208272237582511852109168640000000000000000000000 
                가지나 됩니다. 즉 백사장의 모래알 수보다, 밤하늘의 별보다, 우주를 
                이루는 소립자들의 수보다 훨씬 많은 수입니다.</font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;우주의 
                모든 원자가 각각 고성능의 컴퓨터가 되어 병렬로 연결해 답을 찾으려 
                해도 우주가 끝날 때까지 답을 찾기란 거의 불가능하다는 것이죠. 
                하지만, 영악한 인간들은 여러 가지 최적화 기법을 연구했습니다. 
                그래서 도시의 수가 100개라 해도 왠만한 PC에서 몇 초 안에 답을 
                볼 수가 있게 된 것입니다. 인간이 조금 위대해 보이지 않나요?</font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;여기는 
                정보올림피아드 홈페이지니까 휴리스틱을 최적화와 연결 지어서 
                생각해 보도록 하죠. 정보올림피아드에서 휴리스틱이 필요한 경우는 
                크게 세 가지입니다.</font></p>
                <p style="line-height:150%;"><font size="2">1) 문제 자체가 다항시간 
                알고리즘이 존재하지 않을 때,<br>
                2) 다항시간 알고리즘을 알지만 휴리스틱을 쓰는게 더 편해 보일 
                때.<br>
                3) 알고리즘은 모르지만 점수를 받으려고 몸부림 칠 때.</font></p>
                <p align="center" style="line-height:150%;"><font size="2"><img src="approx1-2.gif"
                 width="263" height="243" border="0"></font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;1)같은 
                경우는 출제자의 문제 출제 의도가 휴리스틱을 사용하라는 것입니다. 
                뭐 어쩌겠습니까. 쓰라면 써야죠. 2)번 같은 경우는 시간이 없거나(말 
                그대로 경시대회니까 시간 관리도 잘 해야겠죠) 그 알고리즘을 구현할 
                만한 자신이 없는 경우입니다. 3)번은 모든 일을 폭력(?)을 이용해서 
                해결하려고 하는 유형입니다. </font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;KOI에서 
                흔히 부분점수가 있는 문제를 볼 수 있습니다. 이 말은 최적해(optimal 
                solution) 뿐만 아니라 어느 정도 좋은 해(good solution -_-;)도 
                인정을 하고 점수를 어느 정도 주겠다는 말이지요. 휴리스틱한 방법들은 
                대부분 최적해를 찾을 수 있다는 보장을 해주지 않거나, 최적해를 
                찾을 수 있다 하더라도 문제의 제한시간(10초 정도..) 내에 찾을 
                수 없는 경우가 많습니다. 부분점수가 있는 문제들은 일단 휴리스틱한 
                방법을 사용해야 하는 문제인지 의심해 보는 것이 좋습니다.</font></p>
                <p style="line-height:150%;"><font size="2">&nbsp;&nbsp;일단 
                휴리스틱에 대한 오바뷰(overview)는 여기서 마치도록 하겠습니다. 
                (2)편에서는 그리디 메소드(greedy method; 탐욕법, 욕심쟁이 방법이라고도 
                함)에 대해서 살펴보겠습니다. 그럼....</font></td>
        </tr>
    </table>
    <p>&nbsp;</p>
</ul>
</body>

</html></html>