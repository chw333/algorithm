<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0058)http://ace.delos.com/usacoanal/s=1.2.1.5/a=nQhiqAX3lZP/64a -->
<HTML><HEAD><TITLE>Analysis 64: Ordered Fractions</TITLE>
<META http-equiv=Content-Type content="text/html; charset=ks_c_5601-1987">
<META content="MSHTML 6.00.2716.2200" name=GENERATOR></HEAD>
<BODY background="Analysis 64 Ordered Fractions.files/bg3.jpg"><IMG height=118 
src="Analysis 64 Ordered Fractions.files/cow1.jpg" width=742> 
<CENTER><B><FONT size=7>Ordered Fractions</FONT></B><BR>Russ Cox </CENTER>
<P>Here's a very fast, straightforward solution from Alex Schwedner: <PRE>#include &lt;fstream.h&gt;
#include &lt;stdlib.h&gt;

struct fraction {
    int numerator;
    int denominator;
};

bool rprime(int a, int b){
   int r = a % b;
   while(r != 0){
       a = b;
       b = r;
       r = a % b;
   }
   return(b == 1);
}

int fraccompare (struct fraction *p, struct fraction *q) {
   return p-&gt;numerator * q-&gt;denominator - p-&gt;denominator *q-&gt;numerator;
}

int main(){
   int found = 0;
   struct fraction fract[25600];

   ifstream filein("frac1.in");
   int n;
   filein &gt;&gt; n;
   filein.close();

   for(int bot = 1; bot &lt;= n; ++bot){
       for(int top = 0; top &lt;= bot; ++top){
           if(rprime(top,bot)){
               fract[found].numerator = top;
               fract[found++].denominator = bot;
           }
       }
   }

   qsort(fract, found, sizeof (struct fraction), fraccompare);

   ofstream fileout("frac1.out");
   for(int i = 0; i &lt; found; ++i)
       fileout &lt;&lt; fract[i].numerator &lt;&lt; '/' &lt;&lt; fract[i].denominator &lt;&lt; endl;
   fileout.close();

   exit (0);
}
</PRE>
<P>Here's a super fast solution from Russ: 
<P>We notice that we can start with 0/1 and 1/1 as our ``endpoints'' and 
recursively generate the middle points by adding numerators and denominators. <PRE>0/1                                                              1/1
                               1/2
                  1/3                      2/3
        1/4              2/5         3/5                 3/4
    1/5      2/7     3/8    3/7   4/7   5/8       5/7         4/5
</PRE>Each fraction is created from the one up to its right and the one up to 
its left. This idea lends itself easily to a recursion that we cut off when we 
go too deep. <PRE>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

int n;
FILE *fout;

/* print the fractions of denominator &lt;= n between n1/d1 and n2/d2 */
void
genfrac(int n1, int d1, int n2, int d2)
{
	if(d1+d2 &gt; n)	/* cut off recursion */
		return;

	genfrac(n1,d1, n1+n2,d1+d2);
	fprintf(fout, "%d/%d\n", n1+n2, d1+d2);
	genfrac(n1+n2,d1+d2, n2,d2);
}

void
main(void)
{
	FILE *fin;

	fin = fopen("frac1.in", "r");
	fout = fopen("frac1.out", "w");
	assert(fin != NULL &amp;&amp; fout != NULL);

	fscanf(fin, "%d", &amp;n);

	fprintf(fout, "0/1\n");
	genfrac(0,1, 1,1);
	fprintf(fout, "1/1\n");
}

</PRE>
<CENTER><A href="http://ace.delos.com/usacogate?a=nQhiqAX3lZP">USACO Gateway</A> 
| <A href="mailto:kolstad@ace.delos.com">Comment or Question</A> 
</CENTER></BODY></HTML>
