<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=euc-kr">
<title>퇴각 검색(Back Tracking)</title>
<meta name="generator" content="Namo WebEditor v5.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<p align="center"><b><font color="#0066CC" size="5">퇴각 검색(Back Tracking)</font></b></p>
<p><font size="2">&nbsp;</font></p>
<p><font size="2">&quot;퇴각 검색&quot;이란?</font></p>
<p><font size="2">&nbsp;&nbsp;퇴각 검색법은 임시 퇴각법, 되추적 법이라고도 불리는 
알고리즘 설계 방식이다. 퇴각 검색법의 대상이 되는 문제의 유형은 보통 주어진 
조건을 만족하는 최적해를 찾거나 또는 주어진 조건을 만족하는 해들의 집합을 찾는 
문제가 된다.</font></p>
<p><font size="2">&nbsp;&nbsp;퇴각 검색법은 욕심쟁이법(Greedy), 동적계획법(Dynamic 
Programming) 등의 다른 알고리즘 설계 방법을 적용하기에 적합하지 않거나 효율적으로 
해결 되지 못할 것(지수 시간 소요)으로 판다되면 고려해 볼 수 있는 설계 방법이다. 
이 말은 결국 퇴각 검색법은 효율적으로 문제를 해결해 줄 수 없다는 것을 의미한다. 
이런 저런 방법이 다 통하지 않아 아주 무지막지한 방법을 사용할 수밖에 없는 경우에 
퇴각 검색법을 이용하면 그나마 수행 시간을 다소 줄일 수 있다.</font></p>
<p><font size="2">&nbsp;&nbsp;퇴각 검색 알고리즘의 해는 주로 n개의 요소로 구성된 
순서리스트(n-tuple) (x1,x2,...,xn)로 나타나게 된다. 예를 들어, n-여왕문제(n-queens 
problem)을 살펴보자. n-여왕문제는 nXn 정방형 체스판에 n개의 여왕말을 위치시키는 
문제인데, 이 때 어느 두 여왕도 같은 행, 같은 열, 같은 대각선 상에 놓여 있으면 
안된다는 제한 조건이 있다. n-여왕문제의 해를 표현하는 방법으로 다음과 같은 순서리스트를 
사용해보자.</font></p>
<p align="center"><font size="2">&nbsp;(x1,x2,x3,...,xn)</font></p>
<p><font size="2">&nbsp;&nbsp;여기서, xi는 i-번째 행에 놓일 여왕의 위치(열번호)를 
의미한다. n=4일 때의 4-여왕 문제의 경우를 생각해보자. 조금만 생각하면 4-여왕문제의 
해를 찾아 낼 수 있다. 답이 될 수 있는 해는 (2,4,1,3)과 (3,1,4,2) 두가지가 있으며, 
그림으로 그려보며 다음과 같다.</font></p>
<p align="center"><font size="2"><img src="images/back-01.gif" width="115" height="124" border="0"></font></p>
<p><font size="2">&nbsp;&nbsp;해의 표현을 어떻게 정하느냐하는 것은 알고리즘의 
설계 방향 및 복잡도를 결정하는 중요한 요소가 된다. n-여왕문제에서 해의 표현으로 
결정한 순서리스트의 각 요소 xi에 1에서 n사이의 정수를 대입하면 해의 후보가 될 
수 있다. 이 경우 해의 후보와 개수는 모두 n^n개가 된다. (각 요소마다 n가지의 
값이 들어 갈 수 있으므로), 해의 후보의 개수를 줄이기 위해서는 문제가 가지고 
있는 성질을 좀 더 파악할 필요가 있다. 4-여왕 문제에서 같은 열에 여왕말이 놓일 
수 없다는 사실로부터 각 xi가 가질 수 있는 값은 모두 달라야 된다는 사실을 얻을 
수 있다. 그렇다면 해의 후보가 되는 순서리스트는 1에서 n까지의 수에 대한 순열(permutation)과 
같고, 따라서 해의 후보의 개수는 n!개가 된다.</font></p>
<p><font size="2">&nbsp;</font></p>
<p><font size="2">&nbsp;&nbsp;만일, 무지막지한 방법으로 n-여왕 문제를 해결하려한다면 
1에서 n까지 수에 대한 모든 순열을 나열한다음 각각에 대해 제한 조건을 만족하는지 
검사하면 된다. n!개의 순열에 대한 검사를 수행하기 위해서는 상당히 많은 시간의 
수행이 필요하다. 퇴각 검색법의 기본 아이디어는 검사 대상이 되는 해의 후보의 
개수를 대폭 줄여 수행시간을 절약해보자는 것이다.</font></p>
<p>&nbsp;</p>
</body>

</html>
