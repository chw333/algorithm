<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=euc-kr">
<title>큐(Queue)</title>
<meta name="generator" content="Namo WebEditor v5.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<p align="center"><font color="#0066FF" size="5"><b>큐(Queue</b>)</font></p>
<table border="0" style="font-size:10pt;">
    <tr>
        <td width="974">
            <p>1. 큐(Queue)란 무엇인가?</p>
            <p>&nbsp; 큐는 한 쪽 끝에서 삽입이 일어나고 다른 쪽 끝에서 삭제가 
            일어나는 순서 있는 리스트이다. 스택이 재귀적 호출과의 연관성 때문에 
            큐보다는 많이 사용되는 자료구조이지만, 큐 역시 많은 경우에 유용하게 
            사용할 수 있는 자료 구조이다.</p>
            <p>&nbsp;</p>
        </td>
    </tr>
    <tr>
        <td width="974">
            <p align="center"><img src="images/queue.jpg" width="508" height="108" border="0"></p>
            <p align="center">[그림 1] 큐의 모양</p>
        </td>
    </tr>
    <tr>
        <td width="974">
            <p>&nbsp;</p>
            <p>2. 큐에 가할 수 있는 연산 &nbsp; 삽입 : 하나의 데이터를 큐에 
            추가한다.</p>
            <p>&nbsp; <b><font color="#003399">&nbsp;제거 : 하나의 데이터를 큐에서 꺼낸다.</font></b></p>
            <p>&nbsp;</p>
            <p>&nbsp; 삽입은 큐 구조에 하나의 데이터를 추가하는 작업으로 큐의 
            가장 마지막 끝에 저장된다. 이 데이터는 자신보다 먼저 큐에 저장된 
            데이터들이 모두 삭제될 때까지 큐에 남아 있게된다. 삭제는 큐 구조에서 
            하나의 데이터를 꺼내어 가져오는 작업으로 큐에 저장된 데이터 가운데 
            가장 오래된 데이터를 꺼내는 작업이다.</p>
            <p>&nbsp;</p>
        </td>
    </tr>
    <tr>
        <td width="974">
            <p>3. 큐의 특성</p>
            <p>&nbsp; 가장 먼저 들어온 데이터가 먼저나간다. (FILO : First In 
            First Out) &nbsp;큐는 가장 먼저 들어 온 데이터가 먼저 나간다는 특성을 
            가진 자료구조로 일사엥서 매우 자주 사용되는 자료 구조이다. 일반적으로 
            피자집에서 피자를 시키면 주문한 순서대로 나오고(돈 더 받으면 우선순위 
            큐가된다....), 기차표를 사려고 할 때 줄을 쓰는데 이 줄도 큐이다. 
            앞에서 배운 스택은 데이터를 차례로 저장했다 하나씩 꺼낸다는 점은 
            큐와 동일하지만, 스택은 가장 나중에 들어온 데이터가 제일 먼저 나가게 
            된다는 점이 다르다.</p>
            <p>&nbsp;</p>
        </td>
    </tr>
    <tr>
        <td width="974">
            <p>4. 큐의 구현</p>
            <p>&nbsp; 큐를 구현하는 가장 쉬운 방법도 스택과 마찬가지로 배열을 
            사용하는 것이다. 그러나 이 경우는 스택의 크기가 미리 정의되기 때문에 
            &quot;overflow&quot;가 발생할 수 있고, 큐가 순환적 구조를 가지므로 
            큐의 위치 정보가 배열의 마지막 인덱스를 지나면 0부터 다시 시작해야 
            한다. 이전 단점을 극복하기 위해서는 원형 연결 리스트 구조를 사용하는 
            것이다.</p>
            <p>&nbsp;</p>
        </td>
    </tr>
    <tr>
        <td width="974" height="120">
            <p>5. 배열을 이용하여 구현한 큐 자료구조와 삽입/삭제 알고리즘(1) 
            삽입</p>
            <p>&nbsp;(1) 삽입</p>
            <p>&nbsp;<font color="#003399"><b>&nbsp;큐에 새 원소를 추가하려면 큐의 마지막 위치(rear)에 
            원소를 추가하고 rear를 증가시키면 된다. 이 때 rear값이 배열의 끝을 
            지나게 되면 다시 0으로 해준다.</b></font></p>
            <p><font color="#003399"><b>&nbsp;</b></font></p>
        </td>
    </tr>
    <tr>
        <td width="974">
            <p><b>1) C/C++</b></p>
            <p><font color="#0066FF">void addQ(int front, int *rear, int data) 
            {</font></p>
            <p>&nbsp;&nbsp;<font color="#006666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rear=(*rear+1) 
            % MAX_QUEUE_SIZE;</font></p>
            <p><font color="#006666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(front 
            == *rear) {</font></p>
            <p><font color="#006666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue_full(rear);</font></p>
            <p><font color="#006666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;</font></p>
            <p><font color="#006666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font></p>
            <p><font color="#006666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[*rear]= 
            data;</font></p>
            <p><font color="#0066FF">}</font></p>
            <p><b>&nbsp;</b></p>
            <p><b>2) Pascal</b></p>
            <p><font color="#006666">Function addQ(front,data :integer , rear 
            : point ) : void </font></p>
            <p><font color="#006600">begin</font></p>
            <p><font color="#006600">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rear:= 
            (rear+1) % MAX_QUEUE_SIZE;</font></p>
            <p><font color="#006600">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
            front = rear then</font></p>
            <p><font color="#006600">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue_full(rear);</font></p>
            <p><font color="#006600">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</font></p>
            <p><font color="#006600">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue(rear):=data;</font></p>
            <p><font color="#006666">end;</font></p>
            <p><b>&nbsp;</b></p>
            <p><b>3) Basic</b></p>
            <p><font color="#006600">sub addq(front,rear,data)</font></p>
            <p><font color="#999933">&nbsp;&nbsp;&nbsp;rear=(rear+1) mod max_queue_size</font></p>
            <p><font color="#999933">&nbsp;&nbsp;&nbsp;if front= rear then</font></p>
            <p><font color="#999933">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue_full(rear)</font></p>
            <p><font color="#999933">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit 
            sub</font></p>
            <p><font color="#999933">&nbsp;&nbsp;&nbsp;else</font></p>
            <p><font color="#999933">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[rear]=data</font></p>
            <p><font color="#006600">end sub</font></p>
        </td>
    </tr>
    <tr>
        <td width="974">
            <p><font color="#003399"><b>&nbsp;</b></font></p>
            <p><font color="#003399"><b>(2) 삭제 &nbsp;큐에서 원소를 꺼내려면 큐의 시작 위치(front)에서 
            원소를 꺼내고 front를 증가시키면 된다. 이 때 front 값이 배열의 끝을 
            지나게 되면 다시 0으로 해준다.</b></font></p>
            <p><font color="#003399"><b>&nbsp;</b></font><b>1) C/C++</b></p>
            <p><font color="#999933">int deleteQ(int *front,int rear) {</font></p>
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#003333">&nbsp;&nbsp;int 
            item;</font></p>
            <p><font color="#003333">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
            (front == rear) return queue_empty();</font></p>
            <p><font color="#003333">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*front 
            = (*front +1) % MAX+QUEUE_SIZE;</font></p>
            <p><font color="#003333">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
            queue[*front];</font></p>
            <p><font color="#999933">}</font></p>
            <p><b>&nbsp;</b></p>
            <p><b>2) Pascal</b></p>
            <p><font color="#003333">Function deleteQ (rear : integer , front 
            : point)</font></p>
            <p><font color="#003333">begin</font></p>
            <p><font color="#993300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item 
            : integer;</font></p>
            <p><font color="#993300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
            front = rear then</font></p>
            <p><font color="#993300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteQ 
            := queue_empty();</font></p>
            <p><font color="#993300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;front 
            = (front+1) % MAX_QUEUE_SIZE;</font></p>
            <p><font color="#993300">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteQ 
            := queue(front);</font></p>
            <p><font color="#003333">end;</font></p>
            <p><b>&nbsp;</b></p>
            <p><b>3) Basic</b></p>
            <p><font color="#993300">function deleteQ(front,rear)</font></p>
            <p>&nbsp;<font color="#993399">&nbsp;&nbsp;dim item as integer</font></p>
            <p><font color="#993399">&nbsp;&nbsp;&nbsp;if front=rear then</font></p>
            <p><font color="#993399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteQ=queue_empty()</font></p>
            <p><font color="#993399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit 
            function</font></p>
            <p><font color="#993399">&nbsp;&nbsp;&nbsp;end if</font></p>
            <p><font color="#993399">&nbsp;&nbsp;&nbsp;front=(front+1) mod max+queue_size</font></p>
            <p><font color="#993399">&nbsp;&nbsp;&nbsp;deleteq=queue(front)</font></p>
            <p><font color="#993300">end function</font></p>
        </td>
    </tr>
    </table>
<p>&nbsp;</p>
</body>

</html>
