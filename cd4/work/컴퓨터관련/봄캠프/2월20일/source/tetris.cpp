:\tt#include <fstream.h>

int back(int nx, int ny);

int map[26][26],map_x,map_y;
int check[700][3],count=0;

void input()
{
	int i,j;

	ifstream in ("tetris.inp");

	in >> map_x >> map_y;
	for(i=0;i<map_x;i++)
		for(j=0;j<map_y;j++)
			in >> map[i][j];

	in.close();
}

void process()
{
	int i,j;
	int che=0;

	for(i=0;i<map_x;i++)
	{
		for(j=0;j<map_y;j++)
		{
			if(map[i][j]==1)
			{
				back(i,j);
				che=1;
				break;
			}
		}
		if(che==1)
			break;
	}

	ofstream out ("tetris.out");

	out << count << endl;

	if(count!=0)
	{	
		for(i=0;i<count;i++)
		{
			out << check[i][0] << " ";
			for(j=1;j<3;j++)
				out << check[i][j]+1 << " ";
			out << endl;
		}
	}

	out.close();
}

int back(int nx, int ny)
{
	int i,j;
	int che;
	int sy;
	int ret;

	if(ny+3<map_y && map[nx][ny+1]==1 && map[nx][ny+2]==1 && map[nx][ny+3]==1) //1
	{
		map[nx][ny]=0;
		map[nx][ny+1]=0;
		map[nx][ny+2]=0;
		map[nx][ny+3]=0;
		check[count][0]=1;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx][ny+1]=1;
		map[nx][ny+2]=1;
		map[nx][ny+3]=1;
	}
	if(nx+3<map_x && map[nx+1][ny]==1 && map[nx+2][ny]==1 && map[nx+3][ny]==1) //2
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+2][ny]=0;
		map[nx+3][ny]=0;
		check[count][0]=2;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+2][ny]=1;
		map[nx+3][ny]=1;
	}
	if(nx+1<map_x && ny-1>=0 && ny+1<map_y && map[nx+1][ny]==1 && map[nx+1][ny-1]==1 && map[nx+1][ny+1]==1) //3
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+1][ny-1]=0;
		map[nx+1][ny+1]=0;
		check[count][0]=3;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+1][ny-1]=1;
		map[nx+1][ny+1]=1;
	}
	if(nx+2<map_x && ny+1<map_y && map[nx+1][ny]==1 && map[nx+1][ny+1]==1 && map[nx+2][ny]==1) //4
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+1][ny+1]=0;
		map[nx+2][ny]=0;
		check[count][0]=4;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+1][ny+1]=1;
		map[nx+2][ny]=1;
	}
	if(nx+1<map_x && ny+2<map_y && map[nx][ny+1]==1 && map[nx][ny+2]==1 && map[nx+1][ny+1]==1) //5
	{
		map[nx][ny]=0;
		map[nx][ny+1]=0;
		map[nx][ny+2]=0;
		map[nx+1][ny+1]=0;
		check[count][0]=5;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx][ny+1]=1;
		map[nx][ny+2]=1;
		map[nx+1][ny+1]=1;
	}
	if(nx+2<map_x && ny-1>=0 && map[nx+1][ny]==1 && map[nx+1][ny-1]==1 && map[nx+2][ny]==1) //6
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+1][ny-1]=0;
		map[nx+2][ny]=0;
		check[count][0]=6;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+1][ny-1]=1;
		map[nx+2][ny]=1;
	}
	if(nx+1<map_x && ny+2<map_y && map[nx][ny+1]==1 && map[nx+1][ny+1]==1 && map[nx+1][ny+2]==1) //7
	{
		map[nx][ny]=0;
		map[nx][ny+1]=0;
		map[nx+1][ny+1]=0;
		map[nx+1][ny+2]=0;
		check[count][0]=7;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx][ny+1]=1;
		map[nx+1][ny+1]=1;
		map[nx+1][ny+2]=1;
	}
	if(nx+2<map_x && ny-1>=0 && map[nx+1][ny]==1 && map[nx+1][ny-1]==1 && map[nx+2][ny-1]==1) //8
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+1][ny-1]=0;
		map[nx+2][ny-1]=0;
		check[count][0]=8;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+1][ny-1]=1;
		map[nx+2][ny-1]=1;
	}
	if(nx+1<map_x && ny-1>=0 && ny+1<map_y && map[nx][ny+1]==1 && map[nx+1][ny]==1 && map[nx+1][ny-1]==1) //9
	{
		map[nx][ny]=0;
		map[nx][ny+1]=0;
		map[nx+1][ny]=0;
		map[nx+1][ny-1]=0;
		check[count][0]=9;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx][ny+1]=1;
		map[nx+1][ny]=1;
		map[nx+1][ny-1]=1;
	}
	if(nx+2<map_x && ny+1<map_y && map[nx+1][ny]==1 && map[nx+1][ny+1]==1 && map[nx+2][ny+1]==1) //10
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+1][ny+1]=0;
		map[nx+2][ny+1]=0;
		check[count][0]=10;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+1][ny+1]=1;
		map[nx+2][ny+1]=1;
	}
	if(nx+1<map_x && ny+2<map_y && map[nx+1][ny]==1 && map[nx][ny+1]==1 && map[nx][ny+2]==1) //11
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx][ny+1]=0;
		map[nx][ny+2]=0;
		check[count][0]=11;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx][ny+1]=1;
		map[nx][ny+2]=1;
	}
	if(nx+2<map_x && ny+1<map_y && map[nx][ny+1]==1 && map[nx+1][ny+1]==1 && map[nx+2][ny+1]==1) //12
	{
		map[nx][ny]=0;
		map[nx][ny+1]=0;
		map[nx+1][ny+1]=0;
		map[nx+2][ny+1]=0;
		check[count][0]=12;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx][ny+1]=1;
		map[nx+1][ny+1]=1;
		map[nx+2][ny+1]=1;
	}
	if(nx+1<map_x && ny-2>=0 && map[nx+1][ny]==1 && map[nx+1][ny-1]==1 && map[nx+1][ny-2]==1) //13
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+1][ny-1]=0;
		map[nx+1][ny-2]=0;
		check[count][0]=13;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+1][ny-1]=1;
		map[nx+1][ny-2]=1;
	}
	if(nx+2<map_x && ny+1<map_y && map[nx+1][ny]==1 && map[nx+2][ny]==1 && map[nx+2][ny+1]==1) //14
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+2][ny]=0;
		map[nx+2][ny+1]=0;
		check[count][0]=14;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+2][ny]=1;
		map[nx+2][ny+1]=1;
	}
	if(nx+1<map_x && ny+2<map_y && map[nx][ny+1]==1 && map[nx][ny+2]==1 && map[nx+1][ny+2]==1) //15
	{
		map[nx][ny]=0;
		map[nx][ny+1]=0;
		map[nx][ny+2]=0;
		map[nx+1][ny+2]=0;
		check[count][0]=15;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx][ny+1]=1;
		map[nx][ny+2]=1;
		map[nx+1][ny+2]=1;
	}
	if(nx+2<map_x && ny-1>=0 && map[nx+1][ny]==1 && map[nx+2][ny]==1 && map[nx+2][ny-1]==1) //16
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+2][ny]=0;
		map[nx+2][ny-1]=0;
		check[count][0]=16;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+2][ny]=1;
		map[nx+2][ny-1]=1;
	}
	if(nx+1<map_x && ny+2<map_y && map[nx+1][ny]==1 && map[nx+1][ny+1]==1 && map[nx+1][ny+2]==1) //17
	{
		map[nx][ny]=0;
		map[nx+1][ny]=0;
		map[nx+1][ny+1]=0;
		map[nx+1][ny+2]=0;
		check[count][0]=17;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx+1][ny]=1;
		map[nx+1][ny+1]=1;
		map[nx+1][ny+2]=1;
	}
	if(nx+2<map_x && ny+1<map_y && map[nx][ny+1]==1 && map[nx+1][ny]==1 && map[nx+2][ny]==1) //18
	{
		map[nx][ny]=0;
		map[nx][ny+1]=0;
		map[nx+1][ny]=0;
		map[nx+2][ny]=0;
		check[count][0]=18;
		check[count][1]=nx;
		check[count++][2]=ny;
		che=0;
		for(i=0;i<map_x;i++)
		{
			for(j=0;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					che=1;
					break;
				}
			}
			if(che==1)
				break;
		}
		if(che==0)
			return 1;
		che=0;
		sy=ny;
		for(i=nx;i<map_x;i++)
		{
			for(j=sy;j<map_y;j++)
			{
				if(map[i][j]==1)
				{
					ret=back(i,j);
					if(ret==1)
						return 1;
					che=1;
					break;
				}
			}
			if(che==1)
				break;
			sy=0;
		}
		count--;
		map[nx][ny]=1;
		map[nx][ny+1]=1;
		map[nx+1][ny]=1;
		map[nx+2][ny]=1;
	}
	return 0;
}

void main()
{
	input();
	process();
}
